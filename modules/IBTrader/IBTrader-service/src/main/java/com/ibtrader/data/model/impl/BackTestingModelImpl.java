/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ibtrader.data.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.ibtrader.data.model.BackTesting;
import com.ibtrader.data.model.BackTestingModel;
import com.ibtrader.data.model.BackTestingSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BackTesting service. Represents a row in the &quot;ibtrader_BackTesting&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link BackTestingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BackTestingImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BackTestingImpl
 * @see BackTesting
 * @see BackTestingModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class BackTestingModelImpl extends BaseModelImpl<BackTesting>
	implements BackTestingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a back testing model instance should use the {@link BackTesting} interface instead.
	 */
	public static final String TABLE_NAME = "ibtrader_BackTesting";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "backTId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "fromDate", Types.TIMESTAMP },
			{ "toDate", Types.TIMESTAMP },
			{ "lastRunDate", Types.TIMESTAMP },
			{ "shareId", Types.BIGINT },
			{ "countordersBUY", Types.BIGINT },
			{ "countordersSELL", Types.BIGINT },
			{ "profitordersBUY", Types.DOUBLE },
			{ "profitordersSELL", Types.DOUBLE },
			{ "status", Types.VARCHAR },
			{ "description", Types.CLOB },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("backTId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fromDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("toDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastRunDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("shareId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("countordersBUY", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("countordersSELL", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("profitordersBUY", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("profitordersSELL", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table ibtrader_BackTesting (uuid_ VARCHAR(75) null,backTId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,fromDate DATE null,toDate DATE null,lastRunDate DATE null,shareId LONG,countordersBUY LONG,countordersSELL LONG,profitordersBUY DOUBLE,profitordersSELL DOUBLE,status VARCHAR(75) null,description TEXT null,startDate DATE null,endDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table ibtrader_BackTesting";
	public static final String ORDER_BY_JPQL = " ORDER BY backTesting.backTId DESC";
	public static final String ORDER_BY_SQL = " ORDER BY ibtrader_BackTesting.backTId DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.service.foo.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.ibtrader.data.model.BackTesting"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.service.foo.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.ibtrader.data.model.BackTesting"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.service.foo.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.ibtrader.data.model.BackTesting"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long SHAREID_COLUMN_BITMASK = 4L;
	public static final long STATUS_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long BACKTID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BackTesting toModel(BackTestingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BackTesting model = new BackTestingImpl();

		model.setUuid(soapModel.getUuid());
		model.setBackTId(soapModel.getBackTId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setFromDate(soapModel.getFromDate());
		model.setToDate(soapModel.getToDate());
		model.setLastRunDate(soapModel.getLastRunDate());
		model.setShareId(soapModel.getShareId());
		model.setCountordersBUY(soapModel.getCountordersBUY());
		model.setCountordersSELL(soapModel.getCountordersSELL());
		model.setProfitordersBUY(soapModel.getProfitordersBUY());
		model.setProfitordersSELL(soapModel.getProfitordersSELL());
		model.setStatus(soapModel.getStatus());
		model.setDescription(soapModel.getDescription());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BackTesting> toModels(BackTestingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BackTesting> models = new ArrayList<BackTesting>(soapModels.length);

		for (BackTestingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.service.foo.service.util.PropsUtil.get(
				"lock.expiration.time.com.ibtrader.data.model.BackTesting"));

	public BackTestingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _backTId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBackTId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _backTId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BackTesting.class;
	}

	@Override
	public String getModelClassName() {
		return BackTesting.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("backTId", getBackTId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("fromDate", getFromDate());
		attributes.put("toDate", getToDate());
		attributes.put("lastRunDate", getLastRunDate());
		attributes.put("shareId", getShareId());
		attributes.put("countordersBUY", getCountordersBUY());
		attributes.put("countordersSELL", getCountordersSELL());
		attributes.put("profitordersBUY", getProfitordersBUY());
		attributes.put("profitordersSELL", getProfitordersSELL());
		attributes.put("status", getStatus());
		attributes.put("description", getDescription());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long backTId = (Long)attributes.get("backTId");

		if (backTId != null) {
			setBackTId(backTId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date fromDate = (Date)attributes.get("fromDate");

		if (fromDate != null) {
			setFromDate(fromDate);
		}

		Date toDate = (Date)attributes.get("toDate");

		if (toDate != null) {
			setToDate(toDate);
		}

		Date lastRunDate = (Date)attributes.get("lastRunDate");

		if (lastRunDate != null) {
			setLastRunDate(lastRunDate);
		}

		Long shareId = (Long)attributes.get("shareId");

		if (shareId != null) {
			setShareId(shareId);
		}

		Long countordersBUY = (Long)attributes.get("countordersBUY");

		if (countordersBUY != null) {
			setCountordersBUY(countordersBUY);
		}

		Long countordersSELL = (Long)attributes.get("countordersSELL");

		if (countordersSELL != null) {
			setCountordersSELL(countordersSELL);
		}

		Double profitordersBUY = (Double)attributes.get("profitordersBUY");

		if (profitordersBUY != null) {
			setProfitordersBUY(profitordersBUY);
		}

		Double profitordersSELL = (Double)attributes.get("profitordersSELL");

		if (profitordersSELL != null) {
			setProfitordersSELL(profitordersSELL);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getBackTId() {
		return _backTId;
	}

	@Override
	public void setBackTId(long backTId) {
		_columnBitmask = -1L;

		_backTId = backTId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getFromDate() {
		return _fromDate;
	}

	@Override
	public void setFromDate(Date fromDate) {
		_fromDate = fromDate;
	}

	@JSON
	@Override
	public Date getToDate() {
		return _toDate;
	}

	@Override
	public void setToDate(Date toDate) {
		_toDate = toDate;
	}

	@JSON
	@Override
	public Date getLastRunDate() {
		return _lastRunDate;
	}

	@Override
	public void setLastRunDate(Date lastRunDate) {
		_lastRunDate = lastRunDate;
	}

	@JSON
	@Override
	public long getShareId() {
		return _shareId;
	}

	@Override
	public void setShareId(long shareId) {
		_columnBitmask |= SHAREID_COLUMN_BITMASK;

		if (!_setOriginalShareId) {
			_setOriginalShareId = true;

			_originalShareId = _shareId;
		}

		_shareId = shareId;
	}

	public long getOriginalShareId() {
		return _originalShareId;
	}

	@JSON
	@Override
	public long getCountordersBUY() {
		return _countordersBUY;
	}

	@Override
	public void setCountordersBUY(long countordersBUY) {
		_countordersBUY = countordersBUY;
	}

	@JSON
	@Override
	public long getCountordersSELL() {
		return _countordersSELL;
	}

	@Override
	public void setCountordersSELL(long countordersSELL) {
		_countordersSELL = countordersSELL;
	}

	@JSON
	@Override
	public double getProfitordersBUY() {
		return _profitordersBUY;
	}

	@Override
	public void setProfitordersBUY(double profitordersBUY) {
		_profitordersBUY = profitordersBUY;
	}

	@JSON
	@Override
	public double getProfitordersSELL() {
		return _profitordersSELL;
	}

	@Override
	public void setProfitordersSELL(double profitordersSELL) {
		_profitordersSELL = profitordersSELL;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				BackTesting.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			BackTesting.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BackTesting toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BackTesting)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BackTestingImpl backTestingImpl = new BackTestingImpl();

		backTestingImpl.setUuid(getUuid());
		backTestingImpl.setBackTId(getBackTId());
		backTestingImpl.setGroupId(getGroupId());
		backTestingImpl.setCompanyId(getCompanyId());
		backTestingImpl.setCreateDate(getCreateDate());
		backTestingImpl.setModifiedDate(getModifiedDate());
		backTestingImpl.setFromDate(getFromDate());
		backTestingImpl.setToDate(getToDate());
		backTestingImpl.setLastRunDate(getLastRunDate());
		backTestingImpl.setShareId(getShareId());
		backTestingImpl.setCountordersBUY(getCountordersBUY());
		backTestingImpl.setCountordersSELL(getCountordersSELL());
		backTestingImpl.setProfitordersBUY(getProfitordersBUY());
		backTestingImpl.setProfitordersSELL(getProfitordersSELL());
		backTestingImpl.setStatus(getStatus());
		backTestingImpl.setDescription(getDescription());
		backTestingImpl.setStartDate(getStartDate());
		backTestingImpl.setEndDate(getEndDate());

		backTestingImpl.resetOriginalValues();

		return backTestingImpl;
	}

	@Override
	public int compareTo(BackTesting backTesting) {
		int value = 0;

		if (getBackTId() < backTesting.getBackTId()) {
			value = -1;
		}
		else if (getBackTId() > backTesting.getBackTId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BackTesting)) {
			return false;
		}

		BackTesting backTesting = (BackTesting)obj;

		long primaryKey = backTesting.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BackTestingModelImpl backTestingModelImpl = this;

		backTestingModelImpl._originalUuid = backTestingModelImpl._uuid;

		backTestingModelImpl._originalGroupId = backTestingModelImpl._groupId;

		backTestingModelImpl._setOriginalGroupId = false;

		backTestingModelImpl._originalCompanyId = backTestingModelImpl._companyId;

		backTestingModelImpl._setOriginalCompanyId = false;

		backTestingModelImpl._setModifiedDate = false;

		backTestingModelImpl._originalShareId = backTestingModelImpl._shareId;

		backTestingModelImpl._setOriginalShareId = false;

		backTestingModelImpl._originalStatus = backTestingModelImpl._status;

		backTestingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BackTesting> toCacheModel() {
		BackTestingCacheModel backTestingCacheModel = new BackTestingCacheModel();

		backTestingCacheModel.uuid = getUuid();

		String uuid = backTestingCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			backTestingCacheModel.uuid = null;
		}

		backTestingCacheModel.backTId = getBackTId();

		backTestingCacheModel.groupId = getGroupId();

		backTestingCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			backTestingCacheModel.createDate = createDate.getTime();
		}
		else {
			backTestingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			backTestingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			backTestingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date fromDate = getFromDate();

		if (fromDate != null) {
			backTestingCacheModel.fromDate = fromDate.getTime();
		}
		else {
			backTestingCacheModel.fromDate = Long.MIN_VALUE;
		}

		Date toDate = getToDate();

		if (toDate != null) {
			backTestingCacheModel.toDate = toDate.getTime();
		}
		else {
			backTestingCacheModel.toDate = Long.MIN_VALUE;
		}

		Date lastRunDate = getLastRunDate();

		if (lastRunDate != null) {
			backTestingCacheModel.lastRunDate = lastRunDate.getTime();
		}
		else {
			backTestingCacheModel.lastRunDate = Long.MIN_VALUE;
		}

		backTestingCacheModel.shareId = getShareId();

		backTestingCacheModel.countordersBUY = getCountordersBUY();

		backTestingCacheModel.countordersSELL = getCountordersSELL();

		backTestingCacheModel.profitordersBUY = getProfitordersBUY();

		backTestingCacheModel.profitordersSELL = getProfitordersSELL();

		backTestingCacheModel.status = getStatus();

		String status = backTestingCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			backTestingCacheModel.status = null;
		}

		backTestingCacheModel.description = getDescription();

		String description = backTestingCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			backTestingCacheModel.description = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			backTestingCacheModel.startDate = startDate.getTime();
		}
		else {
			backTestingCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			backTestingCacheModel.endDate = endDate.getTime();
		}
		else {
			backTestingCacheModel.endDate = Long.MIN_VALUE;
		}

		return backTestingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", backTId=");
		sb.append(getBackTId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", fromDate=");
		sb.append(getFromDate());
		sb.append(", toDate=");
		sb.append(getToDate());
		sb.append(", lastRunDate=");
		sb.append(getLastRunDate());
		sb.append(", shareId=");
		sb.append(getShareId());
		sb.append(", countordersBUY=");
		sb.append(getCountordersBUY());
		sb.append(", countordersSELL=");
		sb.append(getCountordersSELL());
		sb.append(", profitordersBUY=");
		sb.append(getProfitordersBUY());
		sb.append(", profitordersSELL=");
		sb.append(getProfitordersSELL());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.ibtrader.data.model.BackTesting");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>backTId</column-name><column-value><![CDATA[");
		sb.append(getBackTId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromDate</column-name><column-value><![CDATA[");
		sb.append(getFromDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toDate</column-name><column-value><![CDATA[");
		sb.append(getToDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastRunDate</column-name><column-value><![CDATA[");
		sb.append(getLastRunDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shareId</column-name><column-value><![CDATA[");
		sb.append(getShareId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countordersBUY</column-name><column-value><![CDATA[");
		sb.append(getCountordersBUY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countordersSELL</column-name><column-value><![CDATA[");
		sb.append(getCountordersSELL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profitordersBUY</column-name><column-value><![CDATA[");
		sb.append(getProfitordersBUY());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profitordersSELL</column-name><column-value><![CDATA[");
		sb.append(getProfitordersSELL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = BackTesting.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			BackTesting.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _backTId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _fromDate;
	private Date _toDate;
	private Date _lastRunDate;
	private long _shareId;
	private long _originalShareId;
	private boolean _setOriginalShareId;
	private long _countordersBUY;
	private long _countordersSELL;
	private double _profitordersBUY;
	private double _profitordersSELL;
	private String _status;
	private String _originalStatus;
	private String _description;
	private Date _startDate;
	private Date _endDate;
	private long _columnBitmask;
	private BackTesting _escapedModel;
}