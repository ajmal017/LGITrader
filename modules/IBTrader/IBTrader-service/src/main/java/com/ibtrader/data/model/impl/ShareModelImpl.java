/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ibtrader.data.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.ibtrader.data.model.Share;
import com.ibtrader.data.model.ShareModel;
import com.ibtrader.data.model.ShareSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Share service. Represents a row in the &quot;ibtrader_Share&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ShareModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ShareImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ShareImpl
 * @see Share
 * @see ShareModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ShareModelImpl extends BaseModelImpl<Share> implements ShareModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a share model instance should use the {@link Share} interface instead.
	 */
	public static final String TABLE_NAME = "ibtrader_Share";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "shareId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "symbol", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "active_", Types.BOOLEAN },
			{ "numbertopurchase", Types.BIGINT },
			{ "percentual_limit_buy", Types.DOUBLE },
			{ "percentual_stop_lost", Types.DOUBLE },
			{ "percentual_stop_profit", Types.DOUBLE },
			{ "percentual_stop_profit_position", Types.DOUBLE },
			{ "expiry_date", Types.TIMESTAMP },
			{ "expiry_expression", Types.VARCHAR },
			{ "tick_futures", Types.DOUBLE },
			{ "multiplier", Types.BIGINT },
			{ "last_error_data_read", Types.VARCHAR },
			{ "last_error_data_trade", Types.VARCHAR },
			{ "security_type", Types.VARCHAR },
			{ "exchange", Types.VARCHAR },
			{ "primary_exchange", Types.VARCHAR },
			{ "date_contract_verified", Types.TIMESTAMP },
			{ "userCreatedId", Types.BIGINT },
			{ "marketId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shareId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("symbol", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("active_", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("numbertopurchase", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("percentual_limit_buy", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("percentual_stop_lost", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("percentual_stop_profit", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("percentual_stop_profit_position", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("expiry_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expiry_expression", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tick_futures", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("multiplier", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("last_error_data_read", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("last_error_data_trade", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("security_type", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("exchange", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primary_exchange", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("date_contract_verified", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userCreatedId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("marketId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table ibtrader_Share (uuid_ VARCHAR(75) null,shareId LONG not null primary key,name VARCHAR(75) null,symbol VARCHAR(75) null,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,active_ BOOLEAN,numbertopurchase LONG,percentual_limit_buy DOUBLE,percentual_stop_lost DOUBLE,percentual_stop_profit DOUBLE,percentual_stop_profit_position DOUBLE,expiry_date DATE null,expiry_expression VARCHAR(75) null,tick_futures DOUBLE,multiplier LONG,last_error_data_read VARCHAR(75) null,last_error_data_trade VARCHAR(75) null,security_type VARCHAR(75) null,exchange VARCHAR(75) null,primary_exchange VARCHAR(75) null,date_contract_verified DATE null,userCreatedId LONG,marketId LONG)";
	public static final String TABLE_SQL_DROP = "drop table ibtrader_Share";
	public static final String ORDER_BY_JPQL = " ORDER BY share.shareId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ibtrader_Share.shareId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.ibtrader.data.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ibtrader.data.model.Share"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.ibtrader.data.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ibtrader.data.model.Share"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.ibtrader.data.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ibtrader.data.model.Share"),
			true);
	public static final long ACTIVE_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long MARKETID_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long SHAREID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Share toModel(ShareSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Share model = new ShareImpl();

		model.setUuid(soapModel.getUuid());
		model.setShareId(soapModel.getShareId());
		model.setName(soapModel.getName());
		model.setSymbol(soapModel.getSymbol());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setActive(soapModel.getActive());
		model.setNumbertopurchase(soapModel.getNumbertopurchase());
		model.setPercentual_limit_buy(soapModel.getPercentual_limit_buy());
		model.setPercentual_stop_lost(soapModel.getPercentual_stop_lost());
		model.setPercentual_stop_profit(soapModel.getPercentual_stop_profit());
		model.setPercentual_stop_profit_position(soapModel.getPercentual_stop_profit_position());
		model.setExpiry_date(soapModel.getExpiry_date());
		model.setExpiry_expression(soapModel.getExpiry_expression());
		model.setTick_futures(soapModel.getTick_futures());
		model.setMultiplier(soapModel.getMultiplier());
		model.setLast_error_data_read(soapModel.getLast_error_data_read());
		model.setLast_error_data_trade(soapModel.getLast_error_data_trade());
		model.setSecurity_type(soapModel.getSecurity_type());
		model.setExchange(soapModel.getExchange());
		model.setPrimary_exchange(soapModel.getPrimary_exchange());
		model.setDate_contract_verified(soapModel.getDate_contract_verified());
		model.setUserCreatedId(soapModel.getUserCreatedId());
		model.setMarketId(soapModel.getMarketId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Share> toModels(ShareSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Share> models = new ArrayList<Share>(soapModels.length);

		for (ShareSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.ibtrader.data.service.util.ServiceProps.get(
				"lock.expiration.time.com.ibtrader.data.model.Share"));

	public ShareModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _shareId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setShareId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _shareId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Share.class;
	}

	@Override
	public String getModelClassName() {
		return Share.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("shareId", getShareId());
		attributes.put("name", getName());
		attributes.put("symbol", getSymbol());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("active", getActive());
		attributes.put("numbertopurchase", getNumbertopurchase());
		attributes.put("percentual_limit_buy", getPercentual_limit_buy());
		attributes.put("percentual_stop_lost", getPercentual_stop_lost());
		attributes.put("percentual_stop_profit", getPercentual_stop_profit());
		attributes.put("percentual_stop_profit_position",
			getPercentual_stop_profit_position());
		attributes.put("expiry_date", getExpiry_date());
		attributes.put("expiry_expression", getExpiry_expression());
		attributes.put("tick_futures", getTick_futures());
		attributes.put("multiplier", getMultiplier());
		attributes.put("last_error_data_read", getLast_error_data_read());
		attributes.put("last_error_data_trade", getLast_error_data_trade());
		attributes.put("security_type", getSecurity_type());
		attributes.put("exchange", getExchange());
		attributes.put("primary_exchange", getPrimary_exchange());
		attributes.put("date_contract_verified", getDate_contract_verified());
		attributes.put("userCreatedId", getUserCreatedId());
		attributes.put("marketId", getMarketId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long shareId = (Long)attributes.get("shareId");

		if (shareId != null) {
			setShareId(shareId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String symbol = (String)attributes.get("symbol");

		if (symbol != null) {
			setSymbol(symbol);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		Long numbertopurchase = (Long)attributes.get("numbertopurchase");

		if (numbertopurchase != null) {
			setNumbertopurchase(numbertopurchase);
		}

		Double percentual_limit_buy = (Double)attributes.get(
				"percentual_limit_buy");

		if (percentual_limit_buy != null) {
			setPercentual_limit_buy(percentual_limit_buy);
		}

		Double percentual_stop_lost = (Double)attributes.get(
				"percentual_stop_lost");

		if (percentual_stop_lost != null) {
			setPercentual_stop_lost(percentual_stop_lost);
		}

		Double percentual_stop_profit = (Double)attributes.get(
				"percentual_stop_profit");

		if (percentual_stop_profit != null) {
			setPercentual_stop_profit(percentual_stop_profit);
		}

		Double percentual_stop_profit_position = (Double)attributes.get(
				"percentual_stop_profit_position");

		if (percentual_stop_profit_position != null) {
			setPercentual_stop_profit_position(percentual_stop_profit_position);
		}

		Date expiry_date = (Date)attributes.get("expiry_date");

		if (expiry_date != null) {
			setExpiry_date(expiry_date);
		}

		String expiry_expression = (String)attributes.get("expiry_expression");

		if (expiry_expression != null) {
			setExpiry_expression(expiry_expression);
		}

		Double tick_futures = (Double)attributes.get("tick_futures");

		if (tick_futures != null) {
			setTick_futures(tick_futures);
		}

		Long multiplier = (Long)attributes.get("multiplier");

		if (multiplier != null) {
			setMultiplier(multiplier);
		}

		String last_error_data_read = (String)attributes.get(
				"last_error_data_read");

		if (last_error_data_read != null) {
			setLast_error_data_read(last_error_data_read);
		}

		String last_error_data_trade = (String)attributes.get(
				"last_error_data_trade");

		if (last_error_data_trade != null) {
			setLast_error_data_trade(last_error_data_trade);
		}

		String security_type = (String)attributes.get("security_type");

		if (security_type != null) {
			setSecurity_type(security_type);
		}

		String exchange = (String)attributes.get("exchange");

		if (exchange != null) {
			setExchange(exchange);
		}

		String primary_exchange = (String)attributes.get("primary_exchange");

		if (primary_exchange != null) {
			setPrimary_exchange(primary_exchange);
		}

		Date date_contract_verified = (Date)attributes.get(
				"date_contract_verified");

		if (date_contract_verified != null) {
			setDate_contract_verified(date_contract_verified);
		}

		Long userCreatedId = (Long)attributes.get("userCreatedId");

		if (userCreatedId != null) {
			setUserCreatedId(userCreatedId);
		}

		Long marketId = (Long)attributes.get("marketId");

		if (marketId != null) {
			setMarketId(marketId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getShareId() {
		return _shareId;
	}

	@Override
	public void setShareId(long shareId) {
		_shareId = shareId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getSymbol() {
		if (_symbol == null) {
			return StringPool.BLANK;
		}
		else {
			return _symbol;
		}
	}

	@Override
	public void setSymbol(String symbol) {
		_symbol = symbol;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getActive() {
		return _active;
	}

	@JSON
	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_columnBitmask |= ACTIVE_COLUMN_BITMASK;

		if (!_setOriginalActive) {
			_setOriginalActive = true;

			_originalActive = _active;
		}

		_active = active;
	}

	public boolean getOriginalActive() {
		return _originalActive;
	}

	@JSON
	@Override
	public long getNumbertopurchase() {
		return _numbertopurchase;
	}

	@Override
	public void setNumbertopurchase(long numbertopurchase) {
		_numbertopurchase = numbertopurchase;
	}

	@JSON
	@Override
	public double getPercentual_limit_buy() {
		return _percentual_limit_buy;
	}

	@Override
	public void setPercentual_limit_buy(double percentual_limit_buy) {
		_percentual_limit_buy = percentual_limit_buy;
	}

	@JSON
	@Override
	public double getPercentual_stop_lost() {
		return _percentual_stop_lost;
	}

	@Override
	public void setPercentual_stop_lost(double percentual_stop_lost) {
		_percentual_stop_lost = percentual_stop_lost;
	}

	@JSON
	@Override
	public double getPercentual_stop_profit() {
		return _percentual_stop_profit;
	}

	@Override
	public void setPercentual_stop_profit(double percentual_stop_profit) {
		_percentual_stop_profit = percentual_stop_profit;
	}

	@JSON
	@Override
	public double getPercentual_stop_profit_position() {
		return _percentual_stop_profit_position;
	}

	@Override
	public void setPercentual_stop_profit_position(
		double percentual_stop_profit_position) {
		_percentual_stop_profit_position = percentual_stop_profit_position;
	}

	@JSON
	@Override
	public Date getExpiry_date() {
		return _expiry_date;
	}

	@Override
	public void setExpiry_date(Date expiry_date) {
		_expiry_date = expiry_date;
	}

	@JSON
	@Override
	public String getExpiry_expression() {
		if (_expiry_expression == null) {
			return StringPool.BLANK;
		}
		else {
			return _expiry_expression;
		}
	}

	@Override
	public void setExpiry_expression(String expiry_expression) {
		_expiry_expression = expiry_expression;
	}

	@JSON
	@Override
	public double getTick_futures() {
		return _tick_futures;
	}

	@Override
	public void setTick_futures(double tick_futures) {
		_tick_futures = tick_futures;
	}

	@JSON
	@Override
	public long getMultiplier() {
		return _multiplier;
	}

	@Override
	public void setMultiplier(long multiplier) {
		_multiplier = multiplier;
	}

	@JSON
	@Override
	public String getLast_error_data_read() {
		if (_last_error_data_read == null) {
			return StringPool.BLANK;
		}
		else {
			return _last_error_data_read;
		}
	}

	@Override
	public void setLast_error_data_read(String last_error_data_read) {
		_last_error_data_read = last_error_data_read;
	}

	@JSON
	@Override
	public String getLast_error_data_trade() {
		if (_last_error_data_trade == null) {
			return StringPool.BLANK;
		}
		else {
			return _last_error_data_trade;
		}
	}

	@Override
	public void setLast_error_data_trade(String last_error_data_trade) {
		_last_error_data_trade = last_error_data_trade;
	}

	@JSON
	@Override
	public String getSecurity_type() {
		if (_security_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _security_type;
		}
	}

	@Override
	public void setSecurity_type(String security_type) {
		_security_type = security_type;
	}

	@JSON
	@Override
	public String getExchange() {
		if (_exchange == null) {
			return StringPool.BLANK;
		}
		else {
			return _exchange;
		}
	}

	@Override
	public void setExchange(String exchange) {
		_exchange = exchange;
	}

	@JSON
	@Override
	public String getPrimary_exchange() {
		if (_primary_exchange == null) {
			return StringPool.BLANK;
		}
		else {
			return _primary_exchange;
		}
	}

	@Override
	public void setPrimary_exchange(String primary_exchange) {
		_primary_exchange = primary_exchange;
	}

	@JSON
	@Override
	public Date getDate_contract_verified() {
		return _date_contract_verified;
	}

	@Override
	public void setDate_contract_verified(Date date_contract_verified) {
		_date_contract_verified = date_contract_verified;
	}

	@JSON
	@Override
	public long getUserCreatedId() {
		return _userCreatedId;
	}

	@Override
	public void setUserCreatedId(long userCreatedId) {
		_userCreatedId = userCreatedId;
	}

	@JSON
	@Override
	public long getMarketId() {
		return _marketId;
	}

	@Override
	public void setMarketId(long marketId) {
		_columnBitmask |= MARKETID_COLUMN_BITMASK;

		if (!_setOriginalMarketId) {
			_setOriginalMarketId = true;

			_originalMarketId = _marketId;
		}

		_marketId = marketId;
	}

	public long getOriginalMarketId() {
		return _originalMarketId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Share.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Share.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Share toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Share)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ShareImpl shareImpl = new ShareImpl();

		shareImpl.setUuid(getUuid());
		shareImpl.setShareId(getShareId());
		shareImpl.setName(getName());
		shareImpl.setSymbol(getSymbol());
		shareImpl.setGroupId(getGroupId());
		shareImpl.setCompanyId(getCompanyId());
		shareImpl.setCreateDate(getCreateDate());
		shareImpl.setModifiedDate(getModifiedDate());
		shareImpl.setActive(getActive());
		shareImpl.setNumbertopurchase(getNumbertopurchase());
		shareImpl.setPercentual_limit_buy(getPercentual_limit_buy());
		shareImpl.setPercentual_stop_lost(getPercentual_stop_lost());
		shareImpl.setPercentual_stop_profit(getPercentual_stop_profit());
		shareImpl.setPercentual_stop_profit_position(getPercentual_stop_profit_position());
		shareImpl.setExpiry_date(getExpiry_date());
		shareImpl.setExpiry_expression(getExpiry_expression());
		shareImpl.setTick_futures(getTick_futures());
		shareImpl.setMultiplier(getMultiplier());
		shareImpl.setLast_error_data_read(getLast_error_data_read());
		shareImpl.setLast_error_data_trade(getLast_error_data_trade());
		shareImpl.setSecurity_type(getSecurity_type());
		shareImpl.setExchange(getExchange());
		shareImpl.setPrimary_exchange(getPrimary_exchange());
		shareImpl.setDate_contract_verified(getDate_contract_verified());
		shareImpl.setUserCreatedId(getUserCreatedId());
		shareImpl.setMarketId(getMarketId());

		shareImpl.resetOriginalValues();

		return shareImpl;
	}

	@Override
	public int compareTo(Share share) {
		long primaryKey = share.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Share)) {
			return false;
		}

		Share share = (Share)obj;

		long primaryKey = share.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ShareModelImpl shareModelImpl = this;

		shareModelImpl._originalUuid = shareModelImpl._uuid;

		shareModelImpl._originalGroupId = shareModelImpl._groupId;

		shareModelImpl._setOriginalGroupId = false;

		shareModelImpl._originalCompanyId = shareModelImpl._companyId;

		shareModelImpl._setOriginalCompanyId = false;

		shareModelImpl._setModifiedDate = false;

		shareModelImpl._originalActive = shareModelImpl._active;

		shareModelImpl._setOriginalActive = false;

		shareModelImpl._originalMarketId = shareModelImpl._marketId;

		shareModelImpl._setOriginalMarketId = false;

		shareModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Share> toCacheModel() {
		ShareCacheModel shareCacheModel = new ShareCacheModel();

		shareCacheModel.uuid = getUuid();

		String uuid = shareCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			shareCacheModel.uuid = null;
		}

		shareCacheModel.shareId = getShareId();

		shareCacheModel.name = getName();

		String name = shareCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			shareCacheModel.name = null;
		}

		shareCacheModel.symbol = getSymbol();

		String symbol = shareCacheModel.symbol;

		if ((symbol != null) && (symbol.length() == 0)) {
			shareCacheModel.symbol = null;
		}

		shareCacheModel.groupId = getGroupId();

		shareCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			shareCacheModel.createDate = createDate.getTime();
		}
		else {
			shareCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			shareCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			shareCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		shareCacheModel.active = getActive();

		shareCacheModel.numbertopurchase = getNumbertopurchase();

		shareCacheModel.percentual_limit_buy = getPercentual_limit_buy();

		shareCacheModel.percentual_stop_lost = getPercentual_stop_lost();

		shareCacheModel.percentual_stop_profit = getPercentual_stop_profit();

		shareCacheModel.percentual_stop_profit_position = getPercentual_stop_profit_position();

		Date expiry_date = getExpiry_date();

		if (expiry_date != null) {
			shareCacheModel.expiry_date = expiry_date.getTime();
		}
		else {
			shareCacheModel.expiry_date = Long.MIN_VALUE;
		}

		shareCacheModel.expiry_expression = getExpiry_expression();

		String expiry_expression = shareCacheModel.expiry_expression;

		if ((expiry_expression != null) && (expiry_expression.length() == 0)) {
			shareCacheModel.expiry_expression = null;
		}

		shareCacheModel.tick_futures = getTick_futures();

		shareCacheModel.multiplier = getMultiplier();

		shareCacheModel.last_error_data_read = getLast_error_data_read();

		String last_error_data_read = shareCacheModel.last_error_data_read;

		if ((last_error_data_read != null) &&
				(last_error_data_read.length() == 0)) {
			shareCacheModel.last_error_data_read = null;
		}

		shareCacheModel.last_error_data_trade = getLast_error_data_trade();

		String last_error_data_trade = shareCacheModel.last_error_data_trade;

		if ((last_error_data_trade != null) &&
				(last_error_data_trade.length() == 0)) {
			shareCacheModel.last_error_data_trade = null;
		}

		shareCacheModel.security_type = getSecurity_type();

		String security_type = shareCacheModel.security_type;

		if ((security_type != null) && (security_type.length() == 0)) {
			shareCacheModel.security_type = null;
		}

		shareCacheModel.exchange = getExchange();

		String exchange = shareCacheModel.exchange;

		if ((exchange != null) && (exchange.length() == 0)) {
			shareCacheModel.exchange = null;
		}

		shareCacheModel.primary_exchange = getPrimary_exchange();

		String primary_exchange = shareCacheModel.primary_exchange;

		if ((primary_exchange != null) && (primary_exchange.length() == 0)) {
			shareCacheModel.primary_exchange = null;
		}

		Date date_contract_verified = getDate_contract_verified();

		if (date_contract_verified != null) {
			shareCacheModel.date_contract_verified = date_contract_verified.getTime();
		}
		else {
			shareCacheModel.date_contract_verified = Long.MIN_VALUE;
		}

		shareCacheModel.userCreatedId = getUserCreatedId();

		shareCacheModel.marketId = getMarketId();

		return shareCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(53);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", shareId=");
		sb.append(getShareId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", symbol=");
		sb.append(getSymbol());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", numbertopurchase=");
		sb.append(getNumbertopurchase());
		sb.append(", percentual_limit_buy=");
		sb.append(getPercentual_limit_buy());
		sb.append(", percentual_stop_lost=");
		sb.append(getPercentual_stop_lost());
		sb.append(", percentual_stop_profit=");
		sb.append(getPercentual_stop_profit());
		sb.append(", percentual_stop_profit_position=");
		sb.append(getPercentual_stop_profit_position());
		sb.append(", expiry_date=");
		sb.append(getExpiry_date());
		sb.append(", expiry_expression=");
		sb.append(getExpiry_expression());
		sb.append(", tick_futures=");
		sb.append(getTick_futures());
		sb.append(", multiplier=");
		sb.append(getMultiplier());
		sb.append(", last_error_data_read=");
		sb.append(getLast_error_data_read());
		sb.append(", last_error_data_trade=");
		sb.append(getLast_error_data_trade());
		sb.append(", security_type=");
		sb.append(getSecurity_type());
		sb.append(", exchange=");
		sb.append(getExchange());
		sb.append(", primary_exchange=");
		sb.append(getPrimary_exchange());
		sb.append(", date_contract_verified=");
		sb.append(getDate_contract_verified());
		sb.append(", userCreatedId=");
		sb.append(getUserCreatedId());
		sb.append(", marketId=");
		sb.append(getMarketId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(82);

		sb.append("<model><model-name>");
		sb.append("com.ibtrader.data.model.Share");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shareId</column-name><column-value><![CDATA[");
		sb.append(getShareId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>symbol</column-name><column-value><![CDATA[");
		sb.append(getSymbol());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numbertopurchase</column-name><column-value><![CDATA[");
		sb.append(getNumbertopurchase());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percentual_limit_buy</column-name><column-value><![CDATA[");
		sb.append(getPercentual_limit_buy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percentual_stop_lost</column-name><column-value><![CDATA[");
		sb.append(getPercentual_stop_lost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percentual_stop_profit</column-name><column-value><![CDATA[");
		sb.append(getPercentual_stop_profit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percentual_stop_profit_position</column-name><column-value><![CDATA[");
		sb.append(getPercentual_stop_profit_position());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiry_date</column-name><column-value><![CDATA[");
		sb.append(getExpiry_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiry_expression</column-name><column-value><![CDATA[");
		sb.append(getExpiry_expression());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tick_futures</column-name><column-value><![CDATA[");
		sb.append(getTick_futures());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>multiplier</column-name><column-value><![CDATA[");
		sb.append(getMultiplier());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>last_error_data_read</column-name><column-value><![CDATA[");
		sb.append(getLast_error_data_read());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>last_error_data_trade</column-name><column-value><![CDATA[");
		sb.append(getLast_error_data_trade());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>security_type</column-name><column-value><![CDATA[");
		sb.append(getSecurity_type());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>exchange</column-name><column-value><![CDATA[");
		sb.append(getExchange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>primary_exchange</column-name><column-value><![CDATA[");
		sb.append(getPrimary_exchange());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date_contract_verified</column-name><column-value><![CDATA[");
		sb.append(getDate_contract_verified());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userCreatedId</column-name><column-value><![CDATA[");
		sb.append(getUserCreatedId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketId</column-name><column-value><![CDATA[");
		sb.append(getMarketId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Share.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Share.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _shareId;
	private String _name;
	private String _symbol;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _active;
	private boolean _originalActive;
	private boolean _setOriginalActive;
	private long _numbertopurchase;
	private double _percentual_limit_buy;
	private double _percentual_stop_lost;
	private double _percentual_stop_profit;
	private double _percentual_stop_profit_position;
	private Date _expiry_date;
	private String _expiry_expression;
	private double _tick_futures;
	private long _multiplier;
	private String _last_error_data_read;
	private String _last_error_data_trade;
	private String _security_type;
	private String _exchange;
	private String _primary_exchange;
	private Date _date_contract_verified;
	private long _userCreatedId;
	private long _marketId;
	private long _originalMarketId;
	private boolean _setOriginalMarketId;
	private long _columnBitmask;
	private Share _escapedModel;
}