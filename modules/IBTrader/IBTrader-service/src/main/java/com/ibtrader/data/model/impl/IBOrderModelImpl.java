/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ibtrader.data.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.ibtrader.data.model.IBOrder;
import com.ibtrader.data.model.IBOrderModel;
import com.ibtrader.data.model.IBOrderSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the IBOrder service. Represents a row in the &quot;ibtrader_IBOrder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link IBOrderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IBOrderImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see IBOrderImpl
 * @see IBOrder
 * @see IBOrderModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class IBOrderModelImpl extends BaseModelImpl<IBOrder>
	implements IBOrderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ib order model instance should use the {@link IBOrder} interface instead.
	 */
	public static final String TABLE_NAME = "ibtrader_IBOrder";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "orderIdPk", Types.BIGINT },
			{ "ordersId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "shareID", Types.BIGINT },
			{ "checked", Types.BOOLEAN },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "ibclientId", Types.BIGINT },
			{ "removable_on_reboot", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("orderIdPk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ordersId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shareID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("checked", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("ibclientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("removable_on_reboot", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table ibtrader_IBOrder (uuid_ VARCHAR(75) null,orderIdPk LONG not null primary key IDENTITY,ordersId LONG,groupId LONG,companyId LONG,shareID LONG,checked BOOLEAN,createDate DATE null,modifiedDate DATE null,ibclientId LONG,removable_on_reboot BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table ibtrader_IBOrder";
	public static final String ORDER_BY_JPQL = " ORDER BY ibOrder.orderIdPk ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ibtrader_IBOrder.orderIdPk ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.service.foo.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.ibtrader.data.model.IBOrder"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.service.foo.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.ibtrader.data.model.IBOrder"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.service.foo.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.ibtrader.data.model.IBOrder"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long IBCLIENTID_COLUMN_BITMASK = 8L;
	public static final long ORDERSID_COLUMN_BITMASK = 16L;
	public static final long REMOVABLE_ON_REBOOT_COLUMN_BITMASK = 32L;
	public static final long SHAREID_COLUMN_BITMASK = 64L;
	public static final long UUID_COLUMN_BITMASK = 128L;
	public static final long ORDERIDPK_COLUMN_BITMASK = 256L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static IBOrder toModel(IBOrderSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		IBOrder model = new IBOrderImpl();

		model.setUuid(soapModel.getUuid());
		model.setOrderIdPk(soapModel.getOrderIdPk());
		model.setOrdersId(soapModel.getOrdersId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setShareID(soapModel.getShareID());
		model.setChecked(soapModel.getChecked());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setIbclientId(soapModel.getIbclientId());
		model.setRemovable_on_reboot(soapModel.getRemovable_on_reboot());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<IBOrder> toModels(IBOrderSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<IBOrder> models = new ArrayList<IBOrder>(soapModels.length);

		for (IBOrderSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.service.foo.service.util.PropsUtil.get(
				"lock.expiration.time.com.ibtrader.data.model.IBOrder"));

	public IBOrderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _orderIdPk;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setOrderIdPk(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _orderIdPk;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return IBOrder.class;
	}

	@Override
	public String getModelClassName() {
		return IBOrder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("orderIdPk", getOrderIdPk());
		attributes.put("ordersId", getOrdersId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("shareID", getShareID());
		attributes.put("checked", getChecked());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("ibclientId", getIbclientId());
		attributes.put("removable_on_reboot", getRemovable_on_reboot());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long orderIdPk = (Long)attributes.get("orderIdPk");

		if (orderIdPk != null) {
			setOrderIdPk(orderIdPk);
		}

		Long ordersId = (Long)attributes.get("ordersId");

		if (ordersId != null) {
			setOrdersId(ordersId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long shareID = (Long)attributes.get("shareID");

		if (shareID != null) {
			setShareID(shareID);
		}

		Boolean checked = (Boolean)attributes.get("checked");

		if (checked != null) {
			setChecked(checked);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long ibclientId = (Long)attributes.get("ibclientId");

		if (ibclientId != null) {
			setIbclientId(ibclientId);
		}

		Boolean removable_on_reboot = (Boolean)attributes.get(
				"removable_on_reboot");

		if (removable_on_reboot != null) {
			setRemovable_on_reboot(removable_on_reboot);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getOrderIdPk() {
		return _orderIdPk;
	}

	@Override
	public void setOrderIdPk(long orderIdPk) {
		_orderIdPk = orderIdPk;
	}

	@JSON
	@Override
	public long getOrdersId() {
		return _ordersId;
	}

	@Override
	public void setOrdersId(long ordersId) {
		_columnBitmask |= ORDERSID_COLUMN_BITMASK;

		if (!_setOriginalOrdersId) {
			_setOriginalOrdersId = true;

			_originalOrdersId = _ordersId;
		}

		_ordersId = ordersId;
	}

	public long getOriginalOrdersId() {
		return _originalOrdersId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getShareID() {
		return _shareID;
	}

	@Override
	public void setShareID(long shareID) {
		_columnBitmask |= SHAREID_COLUMN_BITMASK;

		if (!_setOriginalShareID) {
			_setOriginalShareID = true;

			_originalShareID = _shareID;
		}

		_shareID = shareID;
	}

	public long getOriginalShareID() {
		return _originalShareID;
	}

	@JSON
	@Override
	public boolean getChecked() {
		return _checked;
	}

	@JSON
	@Override
	public boolean isChecked() {
		return _checked;
	}

	@Override
	public void setChecked(boolean checked) {
		_checked = checked;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask |= CREATEDATE_COLUMN_BITMASK;

		if (_originalCreateDate == null) {
			_originalCreateDate = _createDate;
		}

		_createDate = createDate;
	}

	public Date getOriginalCreateDate() {
		return _originalCreateDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getIbclientId() {
		return _ibclientId;
	}

	@Override
	public void setIbclientId(long ibclientId) {
		_columnBitmask |= IBCLIENTID_COLUMN_BITMASK;

		if (!_setOriginalIbclientId) {
			_setOriginalIbclientId = true;

			_originalIbclientId = _ibclientId;
		}

		_ibclientId = ibclientId;
	}

	public long getOriginalIbclientId() {
		return _originalIbclientId;
	}

	@JSON
	@Override
	public boolean getRemovable_on_reboot() {
		return _removable_on_reboot;
	}

	@JSON
	@Override
	public boolean isRemovable_on_reboot() {
		return _removable_on_reboot;
	}

	@Override
	public void setRemovable_on_reboot(boolean removable_on_reboot) {
		_columnBitmask |= REMOVABLE_ON_REBOOT_COLUMN_BITMASK;

		if (!_setOriginalRemovable_on_reboot) {
			_setOriginalRemovable_on_reboot = true;

			_originalRemovable_on_reboot = _removable_on_reboot;
		}

		_removable_on_reboot = removable_on_reboot;
	}

	public boolean getOriginalRemovable_on_reboot() {
		return _originalRemovable_on_reboot;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				IBOrder.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			IBOrder.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public IBOrder toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (IBOrder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IBOrderImpl ibOrderImpl = new IBOrderImpl();

		ibOrderImpl.setUuid(getUuid());
		ibOrderImpl.setOrderIdPk(getOrderIdPk());
		ibOrderImpl.setOrdersId(getOrdersId());
		ibOrderImpl.setGroupId(getGroupId());
		ibOrderImpl.setCompanyId(getCompanyId());
		ibOrderImpl.setShareID(getShareID());
		ibOrderImpl.setChecked(getChecked());
		ibOrderImpl.setCreateDate(getCreateDate());
		ibOrderImpl.setModifiedDate(getModifiedDate());
		ibOrderImpl.setIbclientId(getIbclientId());
		ibOrderImpl.setRemovable_on_reboot(getRemovable_on_reboot());

		ibOrderImpl.resetOriginalValues();

		return ibOrderImpl;
	}

	@Override
	public int compareTo(IBOrder ibOrder) {
		long primaryKey = ibOrder.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof IBOrder)) {
			return false;
		}

		IBOrder ibOrder = (IBOrder)obj;

		long primaryKey = ibOrder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		IBOrderModelImpl ibOrderModelImpl = this;

		ibOrderModelImpl._originalUuid = ibOrderModelImpl._uuid;

		ibOrderModelImpl._originalOrdersId = ibOrderModelImpl._ordersId;

		ibOrderModelImpl._setOriginalOrdersId = false;

		ibOrderModelImpl._originalGroupId = ibOrderModelImpl._groupId;

		ibOrderModelImpl._setOriginalGroupId = false;

		ibOrderModelImpl._originalCompanyId = ibOrderModelImpl._companyId;

		ibOrderModelImpl._setOriginalCompanyId = false;

		ibOrderModelImpl._originalShareID = ibOrderModelImpl._shareID;

		ibOrderModelImpl._setOriginalShareID = false;

		ibOrderModelImpl._originalCreateDate = ibOrderModelImpl._createDate;

		ibOrderModelImpl._setModifiedDate = false;

		ibOrderModelImpl._originalIbclientId = ibOrderModelImpl._ibclientId;

		ibOrderModelImpl._setOriginalIbclientId = false;

		ibOrderModelImpl._originalRemovable_on_reboot = ibOrderModelImpl._removable_on_reboot;

		ibOrderModelImpl._setOriginalRemovable_on_reboot = false;

		ibOrderModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<IBOrder> toCacheModel() {
		IBOrderCacheModel ibOrderCacheModel = new IBOrderCacheModel();

		ibOrderCacheModel.uuid = getUuid();

		String uuid = ibOrderCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			ibOrderCacheModel.uuid = null;
		}

		ibOrderCacheModel.orderIdPk = getOrderIdPk();

		ibOrderCacheModel.ordersId = getOrdersId();

		ibOrderCacheModel.groupId = getGroupId();

		ibOrderCacheModel.companyId = getCompanyId();

		ibOrderCacheModel.shareID = getShareID();

		ibOrderCacheModel.checked = getChecked();

		Date createDate = getCreateDate();

		if (createDate != null) {
			ibOrderCacheModel.createDate = createDate.getTime();
		}
		else {
			ibOrderCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ibOrderCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ibOrderCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ibOrderCacheModel.ibclientId = getIbclientId();

		ibOrderCacheModel.removable_on_reboot = getRemovable_on_reboot();

		return ibOrderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", orderIdPk=");
		sb.append(getOrderIdPk());
		sb.append(", ordersId=");
		sb.append(getOrdersId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", shareID=");
		sb.append(getShareID());
		sb.append(", checked=");
		sb.append(getChecked());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", ibclientId=");
		sb.append(getIbclientId());
		sb.append(", removable_on_reboot=");
		sb.append(getRemovable_on_reboot());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.ibtrader.data.model.IBOrder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderIdPk</column-name><column-value><![CDATA[");
		sb.append(getOrderIdPk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ordersId</column-name><column-value><![CDATA[");
		sb.append(getOrdersId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shareID</column-name><column-value><![CDATA[");
		sb.append(getShareID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checked</column-name><column-value><![CDATA[");
		sb.append(getChecked());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ibclientId</column-name><column-value><![CDATA[");
		sb.append(getIbclientId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>removable_on_reboot</column-name><column-value><![CDATA[");
		sb.append(getRemovable_on_reboot());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = IBOrder.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			IBOrder.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _orderIdPk;
	private long _ordersId;
	private long _originalOrdersId;
	private boolean _setOriginalOrdersId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _shareID;
	private long _originalShareID;
	private boolean _setOriginalShareID;
	private boolean _checked;
	private Date _createDate;
	private Date _originalCreateDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _ibclientId;
	private long _originalIbclientId;
	private boolean _setOriginalIbclientId;
	private boolean _removable_on_reboot;
	private boolean _originalRemovable_on_reboot;
	private boolean _setOriginalRemovable_on_reboot;
	private long _columnBitmask;
	private IBOrder _escapedModel;
}