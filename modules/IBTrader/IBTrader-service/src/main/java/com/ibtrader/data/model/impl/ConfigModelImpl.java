/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ibtrader.data.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.ibtrader.data.model.Config;
import com.ibtrader.data.model.ConfigModel;
import com.ibtrader.data.model.ConfigSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Config service. Represents a row in the &quot;ibtrader_Config&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConfigImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ConfigImpl
 * @see Config
 * @see ConfigModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ConfigModelImpl extends BaseModelImpl<Config>
	implements ConfigModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a config model instance should use the {@link Config} interface instead.
	 */
	public static final String TABLE_NAME = "ibtrader_Config";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "configId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "value", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "globaldefault", Types.BOOLEAN },
			{ "iscron", Types.BOOLEAN },
			{ "config_key", Types.VARCHAR },
			{ "description", Types.CLOB }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("configId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("value", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("globaldefault", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("iscron", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("config_key", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
	}

	public static final String TABLE_SQL_CREATE = "create table ibtrader_Config (uuid_ VARCHAR(75) null,configId LONG not null primary key,groupId LONG,companyId LONG,name VARCHAR(75) null,value VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,globaldefault BOOLEAN,iscron BOOLEAN,config_key VARCHAR(75) null,description TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table ibtrader_Config";
	public static final String ORDER_BY_JPQL = " ORDER BY config.configId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ibtrader_Config.configId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.service.foo.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.ibtrader.data.model.Config"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.service.foo.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.ibtrader.data.model.Config"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.service.foo.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.ibtrader.data.model.Config"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long CONFIG_KEY_COLUMN_BITMASK = 2L;
	public static final long GLOBALDEFAULT_COLUMN_BITMASK = 4L;
	public static final long GROUPID_COLUMN_BITMASK = 8L;
	public static final long ISCRON_COLUMN_BITMASK = 16L;
	public static final long UUID_COLUMN_BITMASK = 32L;
	public static final long VALUE_COLUMN_BITMASK = 64L;
	public static final long CONFIGID_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Config toModel(ConfigSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Config model = new ConfigImpl();

		model.setUuid(soapModel.getUuid());
		model.setConfigId(soapModel.getConfigId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setName(soapModel.getName());
		model.setValue(soapModel.getValue());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setGlobaldefault(soapModel.getGlobaldefault());
		model.setIscron(soapModel.getIscron());
		model.setConfig_key(soapModel.getConfig_key());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Config> toModels(ConfigSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Config> models = new ArrayList<Config>(soapModels.length);

		for (ConfigSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.service.foo.service.util.PropsUtil.get(
				"lock.expiration.time.com.ibtrader.data.model.Config"));

	public ConfigModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _configId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setConfigId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _configId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Config.class;
	}

	@Override
	public String getModelClassName() {
		return Config.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("configId", getConfigId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("name", getName());
		attributes.put("value", getValue());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("globaldefault", getGlobaldefault());
		attributes.put("iscron", getIscron());
		attributes.put("config_key", getConfig_key());
		attributes.put("description", getDescription());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long configId = (Long)attributes.get("configId");

		if (configId != null) {
			setConfigId(configId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String value = (String)attributes.get("value");

		if (value != null) {
			setValue(value);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Boolean globaldefault = (Boolean)attributes.get("globaldefault");

		if (globaldefault != null) {
			setGlobaldefault(globaldefault);
		}

		Boolean iscron = (Boolean)attributes.get("iscron");

		if (iscron != null) {
			setIscron(iscron);
		}

		String config_key = (String)attributes.get("config_key");

		if (config_key != null) {
			setConfig_key(config_key);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getConfigId() {
		return _configId;
	}

	@Override
	public void setConfigId(long configId) {
		_configId = configId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getValue() {
		if (_value == null) {
			return StringPool.BLANK;
		}
		else {
			return _value;
		}
	}

	@Override
	public void setValue(String value) {
		_columnBitmask |= VALUE_COLUMN_BITMASK;

		if (_originalValue == null) {
			_originalValue = _value;
		}

		_value = value;
	}

	public String getOriginalValue() {
		return GetterUtil.getString(_originalValue);
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public boolean getGlobaldefault() {
		return _globaldefault;
	}

	@JSON
	@Override
	public boolean isGlobaldefault() {
		return _globaldefault;
	}

	@Override
	public void setGlobaldefault(boolean globaldefault) {
		_columnBitmask |= GLOBALDEFAULT_COLUMN_BITMASK;

		if (!_setOriginalGlobaldefault) {
			_setOriginalGlobaldefault = true;

			_originalGlobaldefault = _globaldefault;
		}

		_globaldefault = globaldefault;
	}

	public boolean getOriginalGlobaldefault() {
		return _originalGlobaldefault;
	}

	@JSON
	@Override
	public boolean getIscron() {
		return _iscron;
	}

	@JSON
	@Override
	public boolean isIscron() {
		return _iscron;
	}

	@Override
	public void setIscron(boolean iscron) {
		_columnBitmask |= ISCRON_COLUMN_BITMASK;

		if (!_setOriginalIscron) {
			_setOriginalIscron = true;

			_originalIscron = _iscron;
		}

		_iscron = iscron;
	}

	public boolean getOriginalIscron() {
		return _originalIscron;
	}

	@JSON
	@Override
	public String getConfig_key() {
		if (_config_key == null) {
			return StringPool.BLANK;
		}
		else {
			return _config_key;
		}
	}

	@Override
	public void setConfig_key(String config_key) {
		_columnBitmask |= CONFIG_KEY_COLUMN_BITMASK;

		if (_originalConfig_key == null) {
			_originalConfig_key = _config_key;
		}

		_config_key = config_key;
	}

	public String getOriginalConfig_key() {
		return GetterUtil.getString(_originalConfig_key);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Config.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Config.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Config toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Config)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConfigImpl configImpl = new ConfigImpl();

		configImpl.setUuid(getUuid());
		configImpl.setConfigId(getConfigId());
		configImpl.setGroupId(getGroupId());
		configImpl.setCompanyId(getCompanyId());
		configImpl.setName(getName());
		configImpl.setValue(getValue());
		configImpl.setCreateDate(getCreateDate());
		configImpl.setModifiedDate(getModifiedDate());
		configImpl.setGlobaldefault(getGlobaldefault());
		configImpl.setIscron(getIscron());
		configImpl.setConfig_key(getConfig_key());
		configImpl.setDescription(getDescription());

		configImpl.resetOriginalValues();

		return configImpl;
	}

	@Override
	public int compareTo(Config config) {
		long primaryKey = config.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Config)) {
			return false;
		}

		Config config = (Config)obj;

		long primaryKey = config.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ConfigModelImpl configModelImpl = this;

		configModelImpl._originalUuid = configModelImpl._uuid;

		configModelImpl._originalGroupId = configModelImpl._groupId;

		configModelImpl._setOriginalGroupId = false;

		configModelImpl._originalCompanyId = configModelImpl._companyId;

		configModelImpl._setOriginalCompanyId = false;

		configModelImpl._originalValue = configModelImpl._value;

		configModelImpl._setModifiedDate = false;

		configModelImpl._originalGlobaldefault = configModelImpl._globaldefault;

		configModelImpl._setOriginalGlobaldefault = false;

		configModelImpl._originalIscron = configModelImpl._iscron;

		configModelImpl._setOriginalIscron = false;

		configModelImpl._originalConfig_key = configModelImpl._config_key;

		configModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Config> toCacheModel() {
		ConfigCacheModel configCacheModel = new ConfigCacheModel();

		configCacheModel.uuid = getUuid();

		String uuid = configCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			configCacheModel.uuid = null;
		}

		configCacheModel.configId = getConfigId();

		configCacheModel.groupId = getGroupId();

		configCacheModel.companyId = getCompanyId();

		configCacheModel.name = getName();

		String name = configCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			configCacheModel.name = null;
		}

		configCacheModel.value = getValue();

		String value = configCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			configCacheModel.value = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			configCacheModel.createDate = createDate.getTime();
		}
		else {
			configCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			configCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			configCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		configCacheModel.globaldefault = getGlobaldefault();

		configCacheModel.iscron = getIscron();

		configCacheModel.config_key = getConfig_key();

		String config_key = configCacheModel.config_key;

		if ((config_key != null) && (config_key.length() == 0)) {
			configCacheModel.config_key = null;
		}

		configCacheModel.description = getDescription();

		String description = configCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			configCacheModel.description = null;
		}

		return configCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", configId=");
		sb.append(getConfigId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", value=");
		sb.append(getValue());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", globaldefault=");
		sb.append(getGlobaldefault());
		sb.append(", iscron=");
		sb.append(getIscron());
		sb.append(", config_key=");
		sb.append(getConfig_key());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.ibtrader.data.model.Config");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>configId</column-name><column-value><![CDATA[");
		sb.append(getConfigId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>globaldefault</column-name><column-value><![CDATA[");
		sb.append(getGlobaldefault());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>iscron</column-name><column-value><![CDATA[");
		sb.append(getIscron());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>config_key</column-name><column-value><![CDATA[");
		sb.append(getConfig_key());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Config.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Config.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _configId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _name;
	private String _value;
	private String _originalValue;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private boolean _globaldefault;
	private boolean _originalGlobaldefault;
	private boolean _setOriginalGlobaldefault;
	private boolean _iscron;
	private boolean _originalIscron;
	private boolean _setOriginalIscron;
	private String _config_key;
	private String _originalConfig_key;
	private String _description;
	private long _columnBitmask;
	private Config _escapedModel;
}