/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ibtrader.data.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.ibtrader.data.model.Position;
import com.ibtrader.data.model.PositionModel;
import com.ibtrader.data.model.PositionSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Position service. Represents a row in the &quot;ibtrader_Position&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link PositionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PositionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PositionImpl
 * @see Position
 * @see PositionModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class PositionModelImpl extends BaseModelImpl<Position>
	implements PositionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a position model instance should use the {@link Position} interface instead.
	 */
	public static final String TABLE_NAME = "ibtrader_Position";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "positionId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "shareId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "state_", Types.VARCHAR },
			{ "state_in", Types.VARCHAR },
			{ "state_out", Types.VARCHAR },
			{ "description", Types.CLOB },
			{ "price_in", Types.DOUBLE },
			{ "price_real_in", Types.DOUBLE },
			{ "limit_price_in", Types.DOUBLE },
			{ "date_in", Types.TIMESTAMP },
			{ "date_real_in", Types.TIMESTAMP },
			{ "positionId_tws_in", Types.BIGINT },
			{ "positionId_tws_out", Types.BIGINT },
			{ "type_", Types.VARCHAR },
			{ "price_out", Types.DOUBLE },
			{ "price_real_out", Types.DOUBLE },
			{ "limit_price_out", Types.DOUBLE },
			{ "date_out", Types.TIMESTAMP },
			{ "date_real_out", Types.TIMESTAMP },
			{ "share_number", Types.BIGINT },
			{ "share_number_to_trade", Types.BIGINT },
			{ "share_number_traded", Types.BIGINT },
			{ "clientId_in", Types.BIGINT },
			{ "clientId_out", Types.BIGINT },
			{ "strategy_in", Types.VARCHAR },
			{ "strategy_out", Types.VARCHAR },
			{ "percentualstoplost_out", Types.DOUBLE },
			{ "pricestoplost_out", Types.DOUBLE },
			{ "percentualstopprofit_out", Types.DOUBLE },
			{ "pricestopprofit_out", Types.DOUBLE },
			{ "percentual_trailling_stop_lost", Types.DOUBLE },
			{ "pricetrailling_stop_lost", Types.DOUBLE },
			{ "pendingcancelled", Types.BIGINT },
			{ "trading_data_operations", Types.VARCHAR },
			{ "simulation_mode", Types.BOOLEAN },
			{ "totalcommision", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("positionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("shareId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_in", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_out", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.CLOB);
		TABLE_COLUMNS_MAP.put("price_in", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("price_real_in", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("limit_price_in", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("date_in", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("date_real_in", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("positionId_tws_in", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("positionId_tws_out", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("price_out", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("price_real_out", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("limit_price_out", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("date_out", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("date_real_out", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("share_number", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("share_number_to_trade", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("share_number_traded", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientId_in", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("clientId_out", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("strategy_in", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("strategy_out", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("percentualstoplost_out", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("pricestoplost_out", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("percentualstopprofit_out", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("pricestopprofit_out", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("percentual_trailling_stop_lost", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("pricetrailling_stop_lost", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("pendingcancelled", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("trading_data_operations", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("simulation_mode", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("totalcommision", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table ibtrader_Position (uuid_ VARCHAR(75) null,positionId LONG not null primary key,groupId LONG,companyId LONG,shareId LONG,createDate DATE null,modifiedDate DATE null,state_ VARCHAR(75) null,state_in VARCHAR(75) null,state_out VARCHAR(75) null,description TEXT null,price_in DOUBLE,price_real_in DOUBLE,limit_price_in DOUBLE,date_in DATE null,date_real_in DATE null,positionId_tws_in LONG,positionId_tws_out LONG,type_ VARCHAR(75) null,price_out DOUBLE,price_real_out DOUBLE,limit_price_out DOUBLE,date_out DATE null,date_real_out DATE null,share_number LONG,share_number_to_trade LONG,share_number_traded LONG,clientId_in LONG,clientId_out LONG,strategy_in VARCHAR(75) null,strategy_out VARCHAR(75) null,percentualstoplost_out DOUBLE,pricestoplost_out DOUBLE,percentualstopprofit_out DOUBLE,pricestopprofit_out DOUBLE,percentual_trailling_stop_lost DOUBLE,pricetrailling_stop_lost DOUBLE,pendingcancelled LONG,trading_data_operations VARCHAR(75) null,simulation_mode BOOLEAN,totalcommision DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table ibtrader_Position";
	public static final String ORDER_BY_JPQL = " ORDER BY position.positionId_tws_in DESC";
	public static final String ORDER_BY_SQL = " ORDER BY ibtrader_Position.positionId_tws_in DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.service.foo.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.ibtrader.data.model.Position"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.service.foo.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.ibtrader.data.model.Position"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.service.foo.service.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.ibtrader.data.model.Position"),
			true);
	public static final long CLIENTID_IN_COLUMN_BITMASK = 1L;
	public static final long CLIENTID_OUT_COLUMN_BITMASK = 2L;
	public static final long COMPANYID_COLUMN_BITMASK = 4L;
	public static final long DATE_IN_COLUMN_BITMASK = 8L;
	public static final long DATE_OUT_COLUMN_BITMASK = 16L;
	public static final long DATE_REAL_IN_COLUMN_BITMASK = 32L;
	public static final long DATE_REAL_OUT_COLUMN_BITMASK = 64L;
	public static final long GROUPID_COLUMN_BITMASK = 128L;
	public static final long PENDINGCANCELLED_COLUMN_BITMASK = 256L;
	public static final long POSITIONID_TWS_IN_COLUMN_BITMASK = 512L;
	public static final long POSITIONID_TWS_OUT_COLUMN_BITMASK = 1024L;
	public static final long SHAREID_COLUMN_BITMASK = 2048L;
	public static final long STATE_COLUMN_BITMASK = 4096L;
	public static final long STATE_IN_COLUMN_BITMASK = 8192L;
	public static final long STATE_OUT_COLUMN_BITMASK = 16384L;
	public static final long UUID_COLUMN_BITMASK = 32768L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Position toModel(PositionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Position model = new PositionImpl();

		model.setUuid(soapModel.getUuid());
		model.setPositionId(soapModel.getPositionId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setShareId(soapModel.getShareId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setState(soapModel.getState());
		model.setState_in(soapModel.getState_in());
		model.setState_out(soapModel.getState_out());
		model.setDescription(soapModel.getDescription());
		model.setPrice_in(soapModel.getPrice_in());
		model.setPrice_real_in(soapModel.getPrice_real_in());
		model.setLimit_price_in(soapModel.getLimit_price_in());
		model.setDate_in(soapModel.getDate_in());
		model.setDate_real_in(soapModel.getDate_real_in());
		model.setPositionId_tws_in(soapModel.getPositionId_tws_in());
		model.setPositionId_tws_out(soapModel.getPositionId_tws_out());
		model.setType(soapModel.getType());
		model.setPrice_out(soapModel.getPrice_out());
		model.setPrice_real_out(soapModel.getPrice_real_out());
		model.setLimit_price_out(soapModel.getLimit_price_out());
		model.setDate_out(soapModel.getDate_out());
		model.setDate_real_out(soapModel.getDate_real_out());
		model.setShare_number(soapModel.getShare_number());
		model.setShare_number_to_trade(soapModel.getShare_number_to_trade());
		model.setShare_number_traded(soapModel.getShare_number_traded());
		model.setClientId_in(soapModel.getClientId_in());
		model.setClientId_out(soapModel.getClientId_out());
		model.setStrategy_in(soapModel.getStrategy_in());
		model.setStrategy_out(soapModel.getStrategy_out());
		model.setPercentualstoplost_out(soapModel.getPercentualstoplost_out());
		model.setPricestoplost_out(soapModel.getPricestoplost_out());
		model.setPercentualstopprofit_out(soapModel.getPercentualstopprofit_out());
		model.setPricestopprofit_out(soapModel.getPricestopprofit_out());
		model.setPercentual_trailling_stop_lost(soapModel.getPercentual_trailling_stop_lost());
		model.setPricetrailling_stop_lost(soapModel.getPricetrailling_stop_lost());
		model.setPendingcancelled(soapModel.getPendingcancelled());
		model.setTrading_data_operations(soapModel.getTrading_data_operations());
		model.setSimulation_mode(soapModel.getSimulation_mode());
		model.setTotalcommision(soapModel.getTotalcommision());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Position> toModels(PositionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Position> models = new ArrayList<Position>(soapModels.length);

		for (PositionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.service.foo.service.util.PropsUtil.get(
				"lock.expiration.time.com.ibtrader.data.model.Position"));

	public PositionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _positionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPositionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _positionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Position.class;
	}

	@Override
	public String getModelClassName() {
		return Position.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("positionId", getPositionId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("shareId", getShareId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("state", getState());
		attributes.put("state_in", getState_in());
		attributes.put("state_out", getState_out());
		attributes.put("description", getDescription());
		attributes.put("price_in", getPrice_in());
		attributes.put("price_real_in", getPrice_real_in());
		attributes.put("limit_price_in", getLimit_price_in());
		attributes.put("date_in", getDate_in());
		attributes.put("date_real_in", getDate_real_in());
		attributes.put("positionId_tws_in", getPositionId_tws_in());
		attributes.put("positionId_tws_out", getPositionId_tws_out());
		attributes.put("type", getType());
		attributes.put("price_out", getPrice_out());
		attributes.put("price_real_out", getPrice_real_out());
		attributes.put("limit_price_out", getLimit_price_out());
		attributes.put("date_out", getDate_out());
		attributes.put("date_real_out", getDate_real_out());
		attributes.put("share_number", getShare_number());
		attributes.put("share_number_to_trade", getShare_number_to_trade());
		attributes.put("share_number_traded", getShare_number_traded());
		attributes.put("clientId_in", getClientId_in());
		attributes.put("clientId_out", getClientId_out());
		attributes.put("strategy_in", getStrategy_in());
		attributes.put("strategy_out", getStrategy_out());
		attributes.put("percentualstoplost_out", getPercentualstoplost_out());
		attributes.put("pricestoplost_out", getPricestoplost_out());
		attributes.put("percentualstopprofit_out", getPercentualstopprofit_out());
		attributes.put("pricestopprofit_out", getPricestopprofit_out());
		attributes.put("percentual_trailling_stop_lost",
			getPercentual_trailling_stop_lost());
		attributes.put("pricetrailling_stop_lost", getPricetrailling_stop_lost());
		attributes.put("pendingcancelled", getPendingcancelled());
		attributes.put("trading_data_operations", getTrading_data_operations());
		attributes.put("simulation_mode", getSimulation_mode());
		attributes.put("totalcommision", getTotalcommision());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long positionId = (Long)attributes.get("positionId");

		if (positionId != null) {
			setPositionId(positionId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long shareId = (Long)attributes.get("shareId");

		if (shareId != null) {
			setShareId(shareId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}

		String state_in = (String)attributes.get("state_in");

		if (state_in != null) {
			setState_in(state_in);
		}

		String state_out = (String)attributes.get("state_out");

		if (state_out != null) {
			setState_out(state_out);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Double price_in = (Double)attributes.get("price_in");

		if (price_in != null) {
			setPrice_in(price_in);
		}

		Double price_real_in = (Double)attributes.get("price_real_in");

		if (price_real_in != null) {
			setPrice_real_in(price_real_in);
		}

		Double limit_price_in = (Double)attributes.get("limit_price_in");

		if (limit_price_in != null) {
			setLimit_price_in(limit_price_in);
		}

		Date date_in = (Date)attributes.get("date_in");

		if (date_in != null) {
			setDate_in(date_in);
		}

		Date date_real_in = (Date)attributes.get("date_real_in");

		if (date_real_in != null) {
			setDate_real_in(date_real_in);
		}

		Long positionId_tws_in = (Long)attributes.get("positionId_tws_in");

		if (positionId_tws_in != null) {
			setPositionId_tws_in(positionId_tws_in);
		}

		Long positionId_tws_out = (Long)attributes.get("positionId_tws_out");

		if (positionId_tws_out != null) {
			setPositionId_tws_out(positionId_tws_out);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		Double price_out = (Double)attributes.get("price_out");

		if (price_out != null) {
			setPrice_out(price_out);
		}

		Double price_real_out = (Double)attributes.get("price_real_out");

		if (price_real_out != null) {
			setPrice_real_out(price_real_out);
		}

		Double limit_price_out = (Double)attributes.get("limit_price_out");

		if (limit_price_out != null) {
			setLimit_price_out(limit_price_out);
		}

		Date date_out = (Date)attributes.get("date_out");

		if (date_out != null) {
			setDate_out(date_out);
		}

		Date date_real_out = (Date)attributes.get("date_real_out");

		if (date_real_out != null) {
			setDate_real_out(date_real_out);
		}

		Long share_number = (Long)attributes.get("share_number");

		if (share_number != null) {
			setShare_number(share_number);
		}

		Long share_number_to_trade = (Long)attributes.get(
				"share_number_to_trade");

		if (share_number_to_trade != null) {
			setShare_number_to_trade(share_number_to_trade);
		}

		Long share_number_traded = (Long)attributes.get("share_number_traded");

		if (share_number_traded != null) {
			setShare_number_traded(share_number_traded);
		}

		Long clientId_in = (Long)attributes.get("clientId_in");

		if (clientId_in != null) {
			setClientId_in(clientId_in);
		}

		Long clientId_out = (Long)attributes.get("clientId_out");

		if (clientId_out != null) {
			setClientId_out(clientId_out);
		}

		String strategy_in = (String)attributes.get("strategy_in");

		if (strategy_in != null) {
			setStrategy_in(strategy_in);
		}

		String strategy_out = (String)attributes.get("strategy_out");

		if (strategy_out != null) {
			setStrategy_out(strategy_out);
		}

		Double percentualstoplost_out = (Double)attributes.get(
				"percentualstoplost_out");

		if (percentualstoplost_out != null) {
			setPercentualstoplost_out(percentualstoplost_out);
		}

		Double pricestoplost_out = (Double)attributes.get("pricestoplost_out");

		if (pricestoplost_out != null) {
			setPricestoplost_out(pricestoplost_out);
		}

		Double percentualstopprofit_out = (Double)attributes.get(
				"percentualstopprofit_out");

		if (percentualstopprofit_out != null) {
			setPercentualstopprofit_out(percentualstopprofit_out);
		}

		Double pricestopprofit_out = (Double)attributes.get(
				"pricestopprofit_out");

		if (pricestopprofit_out != null) {
			setPricestopprofit_out(pricestopprofit_out);
		}

		Double percentual_trailling_stop_lost = (Double)attributes.get(
				"percentual_trailling_stop_lost");

		if (percentual_trailling_stop_lost != null) {
			setPercentual_trailling_stop_lost(percentual_trailling_stop_lost);
		}

		Double pricetrailling_stop_lost = (Double)attributes.get(
				"pricetrailling_stop_lost");

		if (pricetrailling_stop_lost != null) {
			setPricetrailling_stop_lost(pricetrailling_stop_lost);
		}

		Long pendingcancelled = (Long)attributes.get("pendingcancelled");

		if (pendingcancelled != null) {
			setPendingcancelled(pendingcancelled);
		}

		String trading_data_operations = (String)attributes.get(
				"trading_data_operations");

		if (trading_data_operations != null) {
			setTrading_data_operations(trading_data_operations);
		}

		Boolean simulation_mode = (Boolean)attributes.get("simulation_mode");

		if (simulation_mode != null) {
			setSimulation_mode(simulation_mode);
		}

		Double totalcommision = (Double)attributes.get("totalcommision");

		if (totalcommision != null) {
			setTotalcommision(totalcommision);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPositionId() {
		return _positionId;
	}

	@Override
	public void setPositionId(long positionId) {
		_positionId = positionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getShareId() {
		return _shareId;
	}

	@Override
	public void setShareId(long shareId) {
		_columnBitmask |= SHAREID_COLUMN_BITMASK;

		if (!_setOriginalShareId) {
			_setOriginalShareId = true;

			_originalShareId = _shareId;
		}

		_shareId = shareId;
	}

	public long getOriginalShareId() {
		return _originalShareId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_columnBitmask |= STATE_COLUMN_BITMASK;

		if (_originalState == null) {
			_originalState = _state;
		}

		_state = state;
	}

	public String getOriginalState() {
		return GetterUtil.getString(_originalState);
	}

	@JSON
	@Override
	public String getState_in() {
		if (_state_in == null) {
			return StringPool.BLANK;
		}
		else {
			return _state_in;
		}
	}

	@Override
	public void setState_in(String state_in) {
		_columnBitmask |= STATE_IN_COLUMN_BITMASK;

		if (_originalState_in == null) {
			_originalState_in = _state_in;
		}

		_state_in = state_in;
	}

	public String getOriginalState_in() {
		return GetterUtil.getString(_originalState_in);
	}

	@JSON
	@Override
	public String getState_out() {
		if (_state_out == null) {
			return StringPool.BLANK;
		}
		else {
			return _state_out;
		}
	}

	@Override
	public void setState_out(String state_out) {
		_columnBitmask |= STATE_OUT_COLUMN_BITMASK;

		if (_originalState_out == null) {
			_originalState_out = _state_out;
		}

		_state_out = state_out;
	}

	public String getOriginalState_out() {
		return GetterUtil.getString(_originalState_out);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public double getPrice_in() {
		return _price_in;
	}

	@Override
	public void setPrice_in(double price_in) {
		_price_in = price_in;
	}

	@JSON
	@Override
	public double getPrice_real_in() {
		return _price_real_in;
	}

	@Override
	public void setPrice_real_in(double price_real_in) {
		_price_real_in = price_real_in;
	}

	@JSON
	@Override
	public double getLimit_price_in() {
		return _limit_price_in;
	}

	@Override
	public void setLimit_price_in(double limit_price_in) {
		_limit_price_in = limit_price_in;
	}

	@JSON
	@Override
	public Date getDate_in() {
		return _date_in;
	}

	@Override
	public void setDate_in(Date date_in) {
		_columnBitmask |= DATE_IN_COLUMN_BITMASK;

		if (_originalDate_in == null) {
			_originalDate_in = _date_in;
		}

		_date_in = date_in;
	}

	public Date getOriginalDate_in() {
		return _originalDate_in;
	}

	@JSON
	@Override
	public Date getDate_real_in() {
		return _date_real_in;
	}

	@Override
	public void setDate_real_in(Date date_real_in) {
		_columnBitmask |= DATE_REAL_IN_COLUMN_BITMASK;

		if (_originalDate_real_in == null) {
			_originalDate_real_in = _date_real_in;
		}

		_date_real_in = date_real_in;
	}

	public Date getOriginalDate_real_in() {
		return _originalDate_real_in;
	}

	@JSON
	@Override
	public long getPositionId_tws_in() {
		return _positionId_tws_in;
	}

	@Override
	public void setPositionId_tws_in(long positionId_tws_in) {
		_columnBitmask = -1L;

		if (!_setOriginalPositionId_tws_in) {
			_setOriginalPositionId_tws_in = true;

			_originalPositionId_tws_in = _positionId_tws_in;
		}

		_positionId_tws_in = positionId_tws_in;
	}

	public long getOriginalPositionId_tws_in() {
		return _originalPositionId_tws_in;
	}

	@JSON
	@Override
	public long getPositionId_tws_out() {
		return _positionId_tws_out;
	}

	@Override
	public void setPositionId_tws_out(long positionId_tws_out) {
		_columnBitmask |= POSITIONID_TWS_OUT_COLUMN_BITMASK;

		if (!_setOriginalPositionId_tws_out) {
			_setOriginalPositionId_tws_out = true;

			_originalPositionId_tws_out = _positionId_tws_out;
		}

		_positionId_tws_out = positionId_tws_out;
	}

	public long getOriginalPositionId_tws_out() {
		return _originalPositionId_tws_out;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@JSON
	@Override
	public double getPrice_out() {
		return _price_out;
	}

	@Override
	public void setPrice_out(double price_out) {
		_price_out = price_out;
	}

	@JSON
	@Override
	public double getPrice_real_out() {
		return _price_real_out;
	}

	@Override
	public void setPrice_real_out(double price_real_out) {
		_price_real_out = price_real_out;
	}

	@JSON
	@Override
	public double getLimit_price_out() {
		return _limit_price_out;
	}

	@Override
	public void setLimit_price_out(double limit_price_out) {
		_limit_price_out = limit_price_out;
	}

	@JSON
	@Override
	public Date getDate_out() {
		return _date_out;
	}

	@Override
	public void setDate_out(Date date_out) {
		_columnBitmask |= DATE_OUT_COLUMN_BITMASK;

		if (_originalDate_out == null) {
			_originalDate_out = _date_out;
		}

		_date_out = date_out;
	}

	public Date getOriginalDate_out() {
		return _originalDate_out;
	}

	@JSON
	@Override
	public Date getDate_real_out() {
		return _date_real_out;
	}

	@Override
	public void setDate_real_out(Date date_real_out) {
		_columnBitmask |= DATE_REAL_OUT_COLUMN_BITMASK;

		if (_originalDate_real_out == null) {
			_originalDate_real_out = _date_real_out;
		}

		_date_real_out = date_real_out;
	}

	public Date getOriginalDate_real_out() {
		return _originalDate_real_out;
	}

	@JSON
	@Override
	public long getShare_number() {
		return _share_number;
	}

	@Override
	public void setShare_number(long share_number) {
		_share_number = share_number;
	}

	@JSON
	@Override
	public long getShare_number_to_trade() {
		return _share_number_to_trade;
	}

	@Override
	public void setShare_number_to_trade(long share_number_to_trade) {
		_share_number_to_trade = share_number_to_trade;
	}

	@JSON
	@Override
	public long getShare_number_traded() {
		return _share_number_traded;
	}

	@Override
	public void setShare_number_traded(long share_number_traded) {
		_share_number_traded = share_number_traded;
	}

	@JSON
	@Override
	public long getClientId_in() {
		return _clientId_in;
	}

	@Override
	public void setClientId_in(long clientId_in) {
		_columnBitmask |= CLIENTID_IN_COLUMN_BITMASK;

		if (!_setOriginalClientId_in) {
			_setOriginalClientId_in = true;

			_originalClientId_in = _clientId_in;
		}

		_clientId_in = clientId_in;
	}

	public long getOriginalClientId_in() {
		return _originalClientId_in;
	}

	@JSON
	@Override
	public long getClientId_out() {
		return _clientId_out;
	}

	@Override
	public void setClientId_out(long clientId_out) {
		_columnBitmask |= CLIENTID_OUT_COLUMN_BITMASK;

		if (!_setOriginalClientId_out) {
			_setOriginalClientId_out = true;

			_originalClientId_out = _clientId_out;
		}

		_clientId_out = clientId_out;
	}

	public long getOriginalClientId_out() {
		return _originalClientId_out;
	}

	@JSON
	@Override
	public String getStrategy_in() {
		if (_strategy_in == null) {
			return StringPool.BLANK;
		}
		else {
			return _strategy_in;
		}
	}

	@Override
	public void setStrategy_in(String strategy_in) {
		_strategy_in = strategy_in;
	}

	@JSON
	@Override
	public String getStrategy_out() {
		if (_strategy_out == null) {
			return StringPool.BLANK;
		}
		else {
			return _strategy_out;
		}
	}

	@Override
	public void setStrategy_out(String strategy_out) {
		_strategy_out = strategy_out;
	}

	@JSON
	@Override
	public double getPercentualstoplost_out() {
		return _percentualstoplost_out;
	}

	@Override
	public void setPercentualstoplost_out(double percentualstoplost_out) {
		_percentualstoplost_out = percentualstoplost_out;
	}

	@JSON
	@Override
	public double getPricestoplost_out() {
		return _pricestoplost_out;
	}

	@Override
	public void setPricestoplost_out(double pricestoplost_out) {
		_pricestoplost_out = pricestoplost_out;
	}

	@JSON
	@Override
	public double getPercentualstopprofit_out() {
		return _percentualstopprofit_out;
	}

	@Override
	public void setPercentualstopprofit_out(double percentualstopprofit_out) {
		_percentualstopprofit_out = percentualstopprofit_out;
	}

	@JSON
	@Override
	public double getPricestopprofit_out() {
		return _pricestopprofit_out;
	}

	@Override
	public void setPricestopprofit_out(double pricestopprofit_out) {
		_pricestopprofit_out = pricestopprofit_out;
	}

	@JSON
	@Override
	public double getPercentual_trailling_stop_lost() {
		return _percentual_trailling_stop_lost;
	}

	@Override
	public void setPercentual_trailling_stop_lost(
		double percentual_trailling_stop_lost) {
		_percentual_trailling_stop_lost = percentual_trailling_stop_lost;
	}

	@JSON
	@Override
	public double getPricetrailling_stop_lost() {
		return _pricetrailling_stop_lost;
	}

	@Override
	public void setPricetrailling_stop_lost(double pricetrailling_stop_lost) {
		_pricetrailling_stop_lost = pricetrailling_stop_lost;
	}

	@JSON
	@Override
	public long getPendingcancelled() {
		return _pendingcancelled;
	}

	@Override
	public void setPendingcancelled(long pendingcancelled) {
		_columnBitmask |= PENDINGCANCELLED_COLUMN_BITMASK;

		if (!_setOriginalPendingcancelled) {
			_setOriginalPendingcancelled = true;

			_originalPendingcancelled = _pendingcancelled;
		}

		_pendingcancelled = pendingcancelled;
	}

	public long getOriginalPendingcancelled() {
		return _originalPendingcancelled;
	}

	@JSON
	@Override
	public String getTrading_data_operations() {
		if (_trading_data_operations == null) {
			return StringPool.BLANK;
		}
		else {
			return _trading_data_operations;
		}
	}

	@Override
	public void setTrading_data_operations(String trading_data_operations) {
		_trading_data_operations = trading_data_operations;
	}

	@JSON
	@Override
	public boolean getSimulation_mode() {
		return _simulation_mode;
	}

	@JSON
	@Override
	public boolean isSimulation_mode() {
		return _simulation_mode;
	}

	@Override
	public void setSimulation_mode(boolean simulation_mode) {
		_simulation_mode = simulation_mode;
	}

	@JSON
	@Override
	public double getTotalcommision() {
		return _totalcommision;
	}

	@Override
	public void setTotalcommision(double totalcommision) {
		_totalcommision = totalcommision;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Position.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Position.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Position toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Position)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PositionImpl positionImpl = new PositionImpl();

		positionImpl.setUuid(getUuid());
		positionImpl.setPositionId(getPositionId());
		positionImpl.setGroupId(getGroupId());
		positionImpl.setCompanyId(getCompanyId());
		positionImpl.setShareId(getShareId());
		positionImpl.setCreateDate(getCreateDate());
		positionImpl.setModifiedDate(getModifiedDate());
		positionImpl.setState(getState());
		positionImpl.setState_in(getState_in());
		positionImpl.setState_out(getState_out());
		positionImpl.setDescription(getDescription());
		positionImpl.setPrice_in(getPrice_in());
		positionImpl.setPrice_real_in(getPrice_real_in());
		positionImpl.setLimit_price_in(getLimit_price_in());
		positionImpl.setDate_in(getDate_in());
		positionImpl.setDate_real_in(getDate_real_in());
		positionImpl.setPositionId_tws_in(getPositionId_tws_in());
		positionImpl.setPositionId_tws_out(getPositionId_tws_out());
		positionImpl.setType(getType());
		positionImpl.setPrice_out(getPrice_out());
		positionImpl.setPrice_real_out(getPrice_real_out());
		positionImpl.setLimit_price_out(getLimit_price_out());
		positionImpl.setDate_out(getDate_out());
		positionImpl.setDate_real_out(getDate_real_out());
		positionImpl.setShare_number(getShare_number());
		positionImpl.setShare_number_to_trade(getShare_number_to_trade());
		positionImpl.setShare_number_traded(getShare_number_traded());
		positionImpl.setClientId_in(getClientId_in());
		positionImpl.setClientId_out(getClientId_out());
		positionImpl.setStrategy_in(getStrategy_in());
		positionImpl.setStrategy_out(getStrategy_out());
		positionImpl.setPercentualstoplost_out(getPercentualstoplost_out());
		positionImpl.setPricestoplost_out(getPricestoplost_out());
		positionImpl.setPercentualstopprofit_out(getPercentualstopprofit_out());
		positionImpl.setPricestopprofit_out(getPricestopprofit_out());
		positionImpl.setPercentual_trailling_stop_lost(getPercentual_trailling_stop_lost());
		positionImpl.setPricetrailling_stop_lost(getPricetrailling_stop_lost());
		positionImpl.setPendingcancelled(getPendingcancelled());
		positionImpl.setTrading_data_operations(getTrading_data_operations());
		positionImpl.setSimulation_mode(getSimulation_mode());
		positionImpl.setTotalcommision(getTotalcommision());

		positionImpl.resetOriginalValues();

		return positionImpl;
	}

	@Override
	public int compareTo(Position position) {
		int value = 0;

		if (getPositionId_tws_in() < position.getPositionId_tws_in()) {
			value = -1;
		}
		else if (getPositionId_tws_in() > position.getPositionId_tws_in()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Position)) {
			return false;
		}

		Position position = (Position)obj;

		long primaryKey = position.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		PositionModelImpl positionModelImpl = this;

		positionModelImpl._originalUuid = positionModelImpl._uuid;

		positionModelImpl._originalGroupId = positionModelImpl._groupId;

		positionModelImpl._setOriginalGroupId = false;

		positionModelImpl._originalCompanyId = positionModelImpl._companyId;

		positionModelImpl._setOriginalCompanyId = false;

		positionModelImpl._originalShareId = positionModelImpl._shareId;

		positionModelImpl._setOriginalShareId = false;

		positionModelImpl._setModifiedDate = false;

		positionModelImpl._originalState = positionModelImpl._state;

		positionModelImpl._originalState_in = positionModelImpl._state_in;

		positionModelImpl._originalState_out = positionModelImpl._state_out;

		positionModelImpl._originalDate_in = positionModelImpl._date_in;

		positionModelImpl._originalDate_real_in = positionModelImpl._date_real_in;

		positionModelImpl._originalPositionId_tws_in = positionModelImpl._positionId_tws_in;

		positionModelImpl._setOriginalPositionId_tws_in = false;

		positionModelImpl._originalPositionId_tws_out = positionModelImpl._positionId_tws_out;

		positionModelImpl._setOriginalPositionId_tws_out = false;

		positionModelImpl._originalDate_out = positionModelImpl._date_out;

		positionModelImpl._originalDate_real_out = positionModelImpl._date_real_out;

		positionModelImpl._originalClientId_in = positionModelImpl._clientId_in;

		positionModelImpl._setOriginalClientId_in = false;

		positionModelImpl._originalClientId_out = positionModelImpl._clientId_out;

		positionModelImpl._setOriginalClientId_out = false;

		positionModelImpl._originalPendingcancelled = positionModelImpl._pendingcancelled;

		positionModelImpl._setOriginalPendingcancelled = false;

		positionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Position> toCacheModel() {
		PositionCacheModel positionCacheModel = new PositionCacheModel();

		positionCacheModel.uuid = getUuid();

		String uuid = positionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			positionCacheModel.uuid = null;
		}

		positionCacheModel.positionId = getPositionId();

		positionCacheModel.groupId = getGroupId();

		positionCacheModel.companyId = getCompanyId();

		positionCacheModel.shareId = getShareId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			positionCacheModel.createDate = createDate.getTime();
		}
		else {
			positionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			positionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			positionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		positionCacheModel.state = getState();

		String state = positionCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			positionCacheModel.state = null;
		}

		positionCacheModel.state_in = getState_in();

		String state_in = positionCacheModel.state_in;

		if ((state_in != null) && (state_in.length() == 0)) {
			positionCacheModel.state_in = null;
		}

		positionCacheModel.state_out = getState_out();

		String state_out = positionCacheModel.state_out;

		if ((state_out != null) && (state_out.length() == 0)) {
			positionCacheModel.state_out = null;
		}

		positionCacheModel.description = getDescription();

		String description = positionCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			positionCacheModel.description = null;
		}

		positionCacheModel.price_in = getPrice_in();

		positionCacheModel.price_real_in = getPrice_real_in();

		positionCacheModel.limit_price_in = getLimit_price_in();

		Date date_in = getDate_in();

		if (date_in != null) {
			positionCacheModel.date_in = date_in.getTime();
		}
		else {
			positionCacheModel.date_in = Long.MIN_VALUE;
		}

		Date date_real_in = getDate_real_in();

		if (date_real_in != null) {
			positionCacheModel.date_real_in = date_real_in.getTime();
		}
		else {
			positionCacheModel.date_real_in = Long.MIN_VALUE;
		}

		positionCacheModel.positionId_tws_in = getPositionId_tws_in();

		positionCacheModel.positionId_tws_out = getPositionId_tws_out();

		positionCacheModel.type = getType();

		String type = positionCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			positionCacheModel.type = null;
		}

		positionCacheModel.price_out = getPrice_out();

		positionCacheModel.price_real_out = getPrice_real_out();

		positionCacheModel.limit_price_out = getLimit_price_out();

		Date date_out = getDate_out();

		if (date_out != null) {
			positionCacheModel.date_out = date_out.getTime();
		}
		else {
			positionCacheModel.date_out = Long.MIN_VALUE;
		}

		Date date_real_out = getDate_real_out();

		if (date_real_out != null) {
			positionCacheModel.date_real_out = date_real_out.getTime();
		}
		else {
			positionCacheModel.date_real_out = Long.MIN_VALUE;
		}

		positionCacheModel.share_number = getShare_number();

		positionCacheModel.share_number_to_trade = getShare_number_to_trade();

		positionCacheModel.share_number_traded = getShare_number_traded();

		positionCacheModel.clientId_in = getClientId_in();

		positionCacheModel.clientId_out = getClientId_out();

		positionCacheModel.strategy_in = getStrategy_in();

		String strategy_in = positionCacheModel.strategy_in;

		if ((strategy_in != null) && (strategy_in.length() == 0)) {
			positionCacheModel.strategy_in = null;
		}

		positionCacheModel.strategy_out = getStrategy_out();

		String strategy_out = positionCacheModel.strategy_out;

		if ((strategy_out != null) && (strategy_out.length() == 0)) {
			positionCacheModel.strategy_out = null;
		}

		positionCacheModel.percentualstoplost_out = getPercentualstoplost_out();

		positionCacheModel.pricestoplost_out = getPricestoplost_out();

		positionCacheModel.percentualstopprofit_out = getPercentualstopprofit_out();

		positionCacheModel.pricestopprofit_out = getPricestopprofit_out();

		positionCacheModel.percentual_trailling_stop_lost = getPercentual_trailling_stop_lost();

		positionCacheModel.pricetrailling_stop_lost = getPricetrailling_stop_lost();

		positionCacheModel.pendingcancelled = getPendingcancelled();

		positionCacheModel.trading_data_operations = getTrading_data_operations();

		String trading_data_operations = positionCacheModel.trading_data_operations;

		if ((trading_data_operations != null) &&
				(trading_data_operations.length() == 0)) {
			positionCacheModel.trading_data_operations = null;
		}

		positionCacheModel.simulation_mode = getSimulation_mode();

		positionCacheModel.totalcommision = getTotalcommision();

		return positionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(83);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", positionId=");
		sb.append(getPositionId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", shareId=");
		sb.append(getShareId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", state_in=");
		sb.append(getState_in());
		sb.append(", state_out=");
		sb.append(getState_out());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", price_in=");
		sb.append(getPrice_in());
		sb.append(", price_real_in=");
		sb.append(getPrice_real_in());
		sb.append(", limit_price_in=");
		sb.append(getLimit_price_in());
		sb.append(", date_in=");
		sb.append(getDate_in());
		sb.append(", date_real_in=");
		sb.append(getDate_real_in());
		sb.append(", positionId_tws_in=");
		sb.append(getPositionId_tws_in());
		sb.append(", positionId_tws_out=");
		sb.append(getPositionId_tws_out());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", price_out=");
		sb.append(getPrice_out());
		sb.append(", price_real_out=");
		sb.append(getPrice_real_out());
		sb.append(", limit_price_out=");
		sb.append(getLimit_price_out());
		sb.append(", date_out=");
		sb.append(getDate_out());
		sb.append(", date_real_out=");
		sb.append(getDate_real_out());
		sb.append(", share_number=");
		sb.append(getShare_number());
		sb.append(", share_number_to_trade=");
		sb.append(getShare_number_to_trade());
		sb.append(", share_number_traded=");
		sb.append(getShare_number_traded());
		sb.append(", clientId_in=");
		sb.append(getClientId_in());
		sb.append(", clientId_out=");
		sb.append(getClientId_out());
		sb.append(", strategy_in=");
		sb.append(getStrategy_in());
		sb.append(", strategy_out=");
		sb.append(getStrategy_out());
		sb.append(", percentualstoplost_out=");
		sb.append(getPercentualstoplost_out());
		sb.append(", pricestoplost_out=");
		sb.append(getPricestoplost_out());
		sb.append(", percentualstopprofit_out=");
		sb.append(getPercentualstopprofit_out());
		sb.append(", pricestopprofit_out=");
		sb.append(getPricestopprofit_out());
		sb.append(", percentual_trailling_stop_lost=");
		sb.append(getPercentual_trailling_stop_lost());
		sb.append(", pricetrailling_stop_lost=");
		sb.append(getPricetrailling_stop_lost());
		sb.append(", pendingcancelled=");
		sb.append(getPendingcancelled());
		sb.append(", trading_data_operations=");
		sb.append(getTrading_data_operations());
		sb.append(", simulation_mode=");
		sb.append(getSimulation_mode());
		sb.append(", totalcommision=");
		sb.append(getTotalcommision());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(127);

		sb.append("<model><model-name>");
		sb.append("com.ibtrader.data.model.Position");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionId</column-name><column-value><![CDATA[");
		sb.append(getPositionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shareId</column-name><column-value><![CDATA[");
		sb.append(getShareId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state_in</column-name><column-value><![CDATA[");
		sb.append(getState_in());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state_out</column-name><column-value><![CDATA[");
		sb.append(getState_out());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price_in</column-name><column-value><![CDATA[");
		sb.append(getPrice_in());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price_real_in</column-name><column-value><![CDATA[");
		sb.append(getPrice_real_in());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>limit_price_in</column-name><column-value><![CDATA[");
		sb.append(getLimit_price_in());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date_in</column-name><column-value><![CDATA[");
		sb.append(getDate_in());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date_real_in</column-name><column-value><![CDATA[");
		sb.append(getDate_real_in());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionId_tws_in</column-name><column-value><![CDATA[");
		sb.append(getPositionId_tws_in());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>positionId_tws_out</column-name><column-value><![CDATA[");
		sb.append(getPositionId_tws_out());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price_out</column-name><column-value><![CDATA[");
		sb.append(getPrice_out());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price_real_out</column-name><column-value><![CDATA[");
		sb.append(getPrice_real_out());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>limit_price_out</column-name><column-value><![CDATA[");
		sb.append(getLimit_price_out());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date_out</column-name><column-value><![CDATA[");
		sb.append(getDate_out());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date_real_out</column-name><column-value><![CDATA[");
		sb.append(getDate_real_out());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>share_number</column-name><column-value><![CDATA[");
		sb.append(getShare_number());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>share_number_to_trade</column-name><column-value><![CDATA[");
		sb.append(getShare_number_to_trade());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>share_number_traded</column-name><column-value><![CDATA[");
		sb.append(getShare_number_traded());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientId_in</column-name><column-value><![CDATA[");
		sb.append(getClientId_in());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientId_out</column-name><column-value><![CDATA[");
		sb.append(getClientId_out());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>strategy_in</column-name><column-value><![CDATA[");
		sb.append(getStrategy_in());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>strategy_out</column-name><column-value><![CDATA[");
		sb.append(getStrategy_out());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percentualstoplost_out</column-name><column-value><![CDATA[");
		sb.append(getPercentualstoplost_out());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pricestoplost_out</column-name><column-value><![CDATA[");
		sb.append(getPricestoplost_out());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percentualstopprofit_out</column-name><column-value><![CDATA[");
		sb.append(getPercentualstopprofit_out());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pricestopprofit_out</column-name><column-value><![CDATA[");
		sb.append(getPricestopprofit_out());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percentual_trailling_stop_lost</column-name><column-value><![CDATA[");
		sb.append(getPercentual_trailling_stop_lost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pricetrailling_stop_lost</column-name><column-value><![CDATA[");
		sb.append(getPricetrailling_stop_lost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pendingcancelled</column-name><column-value><![CDATA[");
		sb.append(getPendingcancelled());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trading_data_operations</column-name><column-value><![CDATA[");
		sb.append(getTrading_data_operations());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>simulation_mode</column-name><column-value><![CDATA[");
		sb.append(getSimulation_mode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalcommision</column-name><column-value><![CDATA[");
		sb.append(getTotalcommision());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Position.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Position.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _positionId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _shareId;
	private long _originalShareId;
	private boolean _setOriginalShareId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _state;
	private String _originalState;
	private String _state_in;
	private String _originalState_in;
	private String _state_out;
	private String _originalState_out;
	private String _description;
	private double _price_in;
	private double _price_real_in;
	private double _limit_price_in;
	private Date _date_in;
	private Date _originalDate_in;
	private Date _date_real_in;
	private Date _originalDate_real_in;
	private long _positionId_tws_in;
	private long _originalPositionId_tws_in;
	private boolean _setOriginalPositionId_tws_in;
	private long _positionId_tws_out;
	private long _originalPositionId_tws_out;
	private boolean _setOriginalPositionId_tws_out;
	private String _type;
	private double _price_out;
	private double _price_real_out;
	private double _limit_price_out;
	private Date _date_out;
	private Date _originalDate_out;
	private Date _date_real_out;
	private Date _originalDate_real_out;
	private long _share_number;
	private long _share_number_to_trade;
	private long _share_number_traded;
	private long _clientId_in;
	private long _originalClientId_in;
	private boolean _setOriginalClientId_in;
	private long _clientId_out;
	private long _originalClientId_out;
	private boolean _setOriginalClientId_out;
	private String _strategy_in;
	private String _strategy_out;
	private double _percentualstoplost_out;
	private double _pricestoplost_out;
	private double _percentualstopprofit_out;
	private double _pricestopprofit_out;
	private double _percentual_trailling_stop_lost;
	private double _pricetrailling_stop_lost;
	private long _pendingcancelled;
	private long _originalPendingcancelled;
	private boolean _setOriginalPendingcancelled;
	private String _trading_data_operations;
	private boolean _simulation_mode;
	private double _totalcommision;
	private long _columnBitmask;
	private Position _escapedModel;
}