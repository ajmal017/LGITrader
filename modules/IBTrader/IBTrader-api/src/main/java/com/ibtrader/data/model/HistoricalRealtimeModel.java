/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ibtrader.data.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ShardedModel;
import com.liferay.portal.kernel.model.StagedModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the HistoricalRealtime service. Represents a row in the &quot;ibtrader_HistoricalRealtime&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.ibtrader.data.model.impl.HistoricalRealtimeModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.ibtrader.data.model.impl.HistoricalRealtimeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HistoricalRealtime
 * @see com.ibtrader.data.model.impl.HistoricalRealtimeImpl
 * @see com.ibtrader.data.model.impl.HistoricalRealtimeModelImpl
 * @generated
 */
@ProviderType
public interface HistoricalRealtimeModel extends BaseModel<HistoricalRealtime>,
	ShardedModel, StagedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a historical realtime model instance should use the {@link HistoricalRealtime} interface instead.
	 */

	/**
	 * Returns the primary key of this historical realtime.
	 *
	 * @return the primary key of this historical realtime
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this historical realtime.
	 *
	 * @param primaryKey the primary key of this historical realtime
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this historical realtime.
	 *
	 * @return the uuid of this historical realtime
	 */
	@AutoEscape
	@Override
	public String getUuid();

	/**
	 * Sets the uuid of this historical realtime.
	 *
	 * @param uuid the uuid of this historical realtime
	 */
	@Override
	public void setUuid(String uuid);

	/**
	 * Returns the realtime ID of this historical realtime.
	 *
	 * @return the realtime ID of this historical realtime
	 */
	public long getRealtimeId();

	/**
	 * Sets the realtime ID of this historical realtime.
	 *
	 * @param realtimeId the realtime ID of this historical realtime
	 */
	public void setRealtimeId(long realtimeId);

	/**
	 * Returns the group ID of this historical realtime.
	 *
	 * @return the group ID of this historical realtime
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this historical realtime.
	 *
	 * @param groupId the group ID of this historical realtime
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the company ID of this historical realtime.
	 *
	 * @return the company ID of this historical realtime
	 */
	@Override
	public long getCompanyId();

	/**
	 * Sets the company ID of this historical realtime.
	 *
	 * @param companyId the company ID of this historical realtime
	 */
	@Override
	public void setCompanyId(long companyId);

	/**
	 * Returns the share ID of this historical realtime.
	 *
	 * @return the share ID of this historical realtime
	 */
	public long getShareId();

	/**
	 * Sets the share ID of this historical realtime.
	 *
	 * @param shareId the share ID of this historical realtime
	 */
	public void setShareId(long shareId);

	/**
	 * Returns the value of this historical realtime.
	 *
	 * @return the value of this historical realtime
	 */
	public double getValue();

	/**
	 * Sets the value of this historical realtime.
	 *
	 * @param value the value of this historical realtime
	 */
	public void setValue(double value);

	/**
	 * Returns the create date of this historical realtime.
	 *
	 * @return the create date of this historical realtime
	 */
	@Override
	public Date getCreateDate();

	/**
	 * Sets the create date of this historical realtime.
	 *
	 * @param createDate the create date of this historical realtime
	 */
	@Override
	public void setCreateDate(Date createDate);

	/**
	 * Returns the modified date of this historical realtime.
	 *
	 * @return the modified date of this historical realtime
	 */
	@Override
	public Date getModifiedDate();

	/**
	 * Sets the modified date of this historical realtime.
	 *
	 * @param modifiedDate the modified date of this historical realtime
	 */
	@Override
	public void setModifiedDate(Date modifiedDate);

	/**
	 * Returns the max_value of this historical realtime.
	 *
	 * @return the max_value of this historical realtime
	 */
	public double getMax_value();

	/**
	 * Sets the max_value of this historical realtime.
	 *
	 * @param max_value the max_value of this historical realtime
	 */
	public void setMax_value(double max_value);

	/**
	 * Returns the min_value of this historical realtime.
	 *
	 * @return the min_value of this historical realtime
	 */
	public double getMin_value();

	/**
	 * Sets the min_value of this historical realtime.
	 *
	 * @param min_value the min_value of this historical realtime
	 */
	public void setMin_value(double min_value);

	/**
	 * Returns the volume of this historical realtime.
	 *
	 * @return the volume of this historical realtime
	 */
	public int getVolume();

	/**
	 * Sets the volume of this historical realtime.
	 *
	 * @param volume the volume of this historical realtime
	 */
	public void setVolume(int volume);

	/**
	 * Returns the avg_volume of this historical realtime.
	 *
	 * @return the avg_volume of this historical realtime
	 */
	public int getAvg_volume();

	/**
	 * Sets the avg_volume of this historical realtime.
	 *
	 * @param avg_volume the avg_volume of this historical realtime
	 */
	public void setAvg_volume(int avg_volume);

	/**
	 * Returns the closeprice of this historical realtime.
	 *
	 * @return the closeprice of this historical realtime
	 */
	public boolean getCloseprice();

	/**
	 * Returns <code>true</code> if this historical realtime is closeprice.
	 *
	 * @return <code>true</code> if this historical realtime is closeprice; <code>false</code> otherwise
	 */
	public boolean isCloseprice();

	/**
	 * Sets whether this historical realtime is closeprice.
	 *
	 * @param closeprice the closeprice of this historical realtime
	 */
	public void setCloseprice(boolean closeprice);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(HistoricalRealtime historicalRealtime);

	@Override
	public int hashCode();

	@Override
	public CacheModel<HistoricalRealtime> toCacheModel();

	@Override
	public HistoricalRealtime toEscapedModel();

	@Override
	public HistoricalRealtime toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}